#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è positive-support-test
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh [environment]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ENVIRONMENT=${1:-dev}
PROJECT_DIR=$(pwd)
LOG_DIR="${PROJECT_DIR}/logs"
BACKUP_DIR="${PROJECT_DIR}/backups"
API_PORT=8000
API_HEALTH_URL="http://localhost:${API_PORT}/health"

echo -e "${BLUE}üöÄ Deploying positive-support-test to ${ENVIRONMENT}${NC}"
echo "================================================================"

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "${LOG_DIR}" "${BACKUP_DIR}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
check_process() {
    local process_name="$1"
    local process_file="$2"
    
    if pgrep -f "$process_file" > /dev/null; then
        echo -e "${GREEN}‚úÖ $process_name is running${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $process_name is not running${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
stop_process() {
    local process_name="$1"
    local process_file="$2"
    
    log "Stopping $process_name..."
    
    # –ù–∞—Ö–æ–¥–∏–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞
    local pids=$(pgrep -f "$process_file" || true)
    
    if [ -n "$pids" ]; then
        for pid in $pids; do
            log "Terminating process $pid ($process_name)"
            kill -TERM "$pid" 2>/dev/null || true
        done
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        sleep 5
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
        local remaining_pids=$(pgrep -f "$process_file" || true)
        if [ -n "$remaining_pids" ]; then
            log "Force killing remaining processes..."
            for pid in $remaining_pids; do
                kill -9 "$pid" 2>/dev/null || true
            done
            sleep 2
        fi
        
        echo -e "${GREEN}‚úÖ $process_name stopped${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $process_name was not running${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ñ–æ–Ω–µ
start_process() {
    local process_name="$1"
    local process_file="$2"
    local log_file="$3"
    
    log "Starting $process_name..."
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ñ–æ–Ω–µ
    if [ -f ".env" ]; then
        export $(grep -v '^#' .env | xargs)
    fi
    nohup env $(grep -v '^#' .env | xargs) python3 "$process_file" > "$log_file" 2>&1 &
    local pid=$!
    
    echo "$pid" > "${process_file}.pid"
    log "$process_name started with PID $pid"
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    sleep 3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if kill -0 "$pid" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ $process_name started successfully${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $process_name failed to start${NC}"
        cat "$log_file" | tail -10
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API
check_api_health() {
    log "Checking API health..."
    
    for i in {1..30}; do
        if curl -f -s "$API_HEALTH_URL" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ API is healthy${NC}"
            return 0
        fi
        
        if [ $((i % 5)) -eq 0 ]; then
            log "Waiting for API to become ready... ($i/30)"
        fi
        sleep 2
    done
    
    echo -e "${RED}‚ùå API health check failed${NC}"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
create_backup() {
    if [ -f "main.py" ] && [ -f "bot.py" ]; then
        local backup_name="backup_$(date +%Y%m%d_%H%M%S)"
        local backup_path="${BACKUP_DIR}/${backup_name}"
        
        log "Creating backup: $backup_name"
        
        mkdir -p "$backup_path"
        cp -r *.py requirements.txt *.md "$backup_path/" 2>/dev/null || true
        
        echo -e "${GREEN}‚úÖ Backup created: $backup_path${NC}"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
        cd "$BACKUP_DIR"
        ls -t | tail -n +6 | xargs -r rm -rf
        cd "$PROJECT_DIR"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "Checking dependencies..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}‚ùå Python 3 is not installed${NC}"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
    if ! command -v pip3 &> /dev/null; then
        echo -e "${RED}‚ùå pip3 is not installed${NC}"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
    if [ ! -f "requirements.txt" ]; then
        echo -e "${RED}‚ùå requirements.txt not found${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Dependencies check passed${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log "Installing/updating dependencies..."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    python3 -m pip install --upgrade pip
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    pip3 install -r requirements.txt
    
    echo -e "${GREEN}‚úÖ Dependencies installed${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    log "Checking database..."
    
    if [ -f "check_db.py" ]; then
        python3 check_db.py || {
            echo -e "${YELLOW}‚ö†Ô∏è  Database check returned non-zero exit code${NC}"
        }
    else
        echo -e "${YELLOW}‚ö†Ô∏è  check_db.py not found, skipping database check${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
cleanup_logs() {
    log "Cleaning up old logs..."
    
    # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    find "$LOG_DIR" -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true
    find . -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Log cleanup completed${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è
main() {
    log "Starting deployment process..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    create_backup
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    stop_process "Bot" "bot.py"
    stop_process "API" "main.py"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    install_dependencies
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    check_database
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º API
    if start_process "API" "main.py" "${LOG_DIR}/api.log"; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
        if check_api_health; then
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            if start_process "Bot" "bot.py" "${LOG_DIR}/bot.log"; then
                log "Waiting for services to stabilize..."
                sleep 10
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                if check_process "API" "main.py" && check_process "Bot" "bot.py"; then
                    echo ""
                    echo -e "${GREEN}üéâ Deployment completed successfully!${NC}"
                    echo ""
                    echo -e "${YELLOW}üìã Service status:${NC}"
                    check_process "API" "main.py"
                    check_process "Bot" "bot.py"
                    echo ""
                    echo -e "${BLUE}üìä Useful commands:${NC}"
                    echo "  Check API logs:    tail -f ${LOG_DIR}/api.log"
                    echo "  Check Bot logs:    tail -f ${LOG_DIR}/bot.log"
                    echo "  API health:        curl ${API_HEALTH_URL}"
                    echo "  Stop services:     ./deploy.sh stop"
                    echo ""
                else
                    echo -e "${RED}‚ùå Some services failed final check${NC}"
                    exit 1
                fi
            else
                echo -e "${RED}‚ùå Failed to start Bot${NC}"
                exit 1
            fi
        else
            echo -e "${RED}‚ùå API health check failed${NC}"
            exit 1
        fi
    else
        echo -e "${RED}‚ùå Failed to start API${NC}"
        exit 1
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
    cleanup_logs
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
stop_all() {
    log "Stopping all services..."
    stop_process "Bot" "bot.py"
    stop_process "API" "main.py"
    echo -e "${GREEN}‚úÖ All services stopped${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    echo -e "${BLUE}üìä Service Status${NC}"
    echo "=================="
    check_process "API" "main.py"
    check_process "Bot" "bot.py"
    
    if [ -f "${LOG_DIR}/api.log" ]; then
        echo ""
        echo -e "${YELLOW}üìÑ Recent API logs:${NC}"
        tail -5 "${LOG_DIR}/api.log"
    fi
    
    if [ -f "${LOG_DIR}/bot.log" ]; then
        echo ""
        echo -e "${YELLOW}üìÑ Recent Bot logs:${NC}"
        tail -5 "${LOG_DIR}/bot.log"
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-deploy}" in
    "deploy"|"dev"|"production")
        main
        ;;
    "stop")
        stop_all
        ;;
    "status")
        show_status
        ;;
    "restart")
        stop_all
        sleep 3
        main
        ;;
    "help"|"-h"|"--help")
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  deploy     - Deploy application (default)"
        echo "  stop       - Stop all services"
        echo "  status     - Show service status"
        echo "  restart    - Restart all services"
        echo "  help       - Show this help"
        echo ""
        echo "Environment: ${ENVIRONMENT}"
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac
