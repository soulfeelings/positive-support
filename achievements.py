# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—ã–¥–∞—á—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from achievements_config import ACHIEVEMENTS

logger = logging.getLogger(__name__)

class AchievementSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, db_connection):
        self.db = db_connection
        
    async def check_achievements(self, user_id: int, action: str, **kwargs) -> List[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (help_given, rating_reached, messages_sent, etc.)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        """
        new_achievements = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_achievements = await self.get_user_achievements(user_id)
            user_achievement_ids = {a["achievement_id"] for a in user_achievements}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            for achievement_id, achievement in ACHIEVEMENTS.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if achievement_id in user_achievement_ids:
                    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {achievement_id} - —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ")
                    continue
                
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement_id} ({achievement['name']})")
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if await self._check_achievement_condition(user_id, achievement, action, **kwargs):
                    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                    await self._grant_achievement(user_id, achievement)
                    new_achievements.append(achievement)
                    print(f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ: {achievement['name']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    logger.info(f"üèÜ Achievement granted: {achievement['name']} to user {user_id}")
                else:
                    print(f"‚ùå –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è {achievement_id}")
            
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(new_achievements)}")
            return new_achievements
            
        except Exception as e:
            logger.error(f"Error checking achievements for user {user_id}: {e}")
            return []
    
    async def _check_achievement_condition(self, user_id: int, achievement: Dict, action: str, **kwargs) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        condition = achievement["condition"]
        condition_action = condition["action"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ action –Ω–µ "all")
        if action != "all" and condition_action != action:
            return False
            
        try:
            if condition_action == "help_given":
                return await self._check_help_given_condition(user_id, condition, **kwargs)
            elif condition_action == "rating_reached":
                return await self._check_rating_reached_condition(user_id, condition, **kwargs)
            elif condition_action == "messages_sent":
                return await self._check_messages_sent_condition(user_id, condition, **kwargs)
            elif condition_action == "registration":
                return await self._check_registration_condition(user_id, condition, **kwargs)
            elif condition_action == "no_complaints":
                return await self._check_no_complaints_condition(user_id, condition, **kwargs)
            elif condition_action == "top_position":
                return await self._check_top_position_condition(user_id, condition, **kwargs)
            else:
                logger.warning(f"Unknown achievement condition: {condition_action}")
                return False
                
        except Exception as e:
            logger.error(f"Error checking achievement condition {achievement['id']}: {e}")
            return False
    
    async def _check_help_given_condition(self, user_id: int, condition: Dict, **kwargs) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–º–æ—â–∏"""
        required_count = condition["count"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–æ–≥
        result = await self.db.fetchval(
            "SELECT COUNT(*) FROM ratings WHERE user_id = $1",
            user_id
        )
        current_count = result or 0
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–º–æ—â–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_count}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_count}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {current_count >= required_count}")
        
        return current_count >= required_count
    
    
    async def _check_rating_reached_condition(self, user_id: int, condition: Dict, **kwargs) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        required_rating = condition["value"]
        
        result = await self.db.fetchval(
            "SELECT rating FROM ratings WHERE user_id = $1",
            user_id
        )
        current_rating = result or 0
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {current_rating}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_rating}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {current_rating >= required_rating}")
        
        return current_rating >= required_rating
    
    async def _check_messages_sent_condition(self, user_id: int, condition: Dict, **kwargs) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        required_count = condition["count"]
        
        result = await self.db.fetchval(
            "SELECT COUNT(*) FROM messages WHERE user_id = $1 AND type = 'support'",
            user_id
        )
        current_count = result or 0
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_count}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_count}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {current_count >= required_count}")
        
        return current_count >= required_count
    
    
    async def _check_registration_condition(self, user_id: int, condition: Dict, **kwargs) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        result = await self.db.fetchval(
            "SELECT EXISTS(SELECT 1 FROM users WHERE user_id = $1)",
            user_id
        )
        return result
    
    async def _check_no_complaints_condition(self, user_id: int, condition: Dict, **kwargs) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∂–∞–ª–æ–±"""
        required_rating = condition.get("rating", 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        rating = await self.db.fetchval(
            "SELECT rating FROM ratings WHERE user_id = $1",
            user_id
        ) or 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±
        complaints = await self.db.fetchval(
            "SELECT COUNT(*) FROM complaints WHERE original_user_id = $1",
            user_id
        ) or 0
        
        return rating >= required_rating and complaints == 0
    
    async def _check_top_position_condition(self, user_id: int, condition: Dict, **kwargs) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–æ–ø–µ"""
        required_position = condition["position"]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        result = await self.db.fetchval("""
            SELECT COUNT(*) + 1
            FROM ratings r
            JOIN users u ON r.user_id = u.user_id
            WHERE u.is_blocked = FALSE AND r.rating > (
                SELECT COALESCE(r2.rating, 0)
                FROM ratings r2
                WHERE r2.user_id = $1
            )
        """, user_id)
        
        return result <= required_position
    
    async def _grant_achievement(self, user_id: int, achievement: Dict):
        """–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.execute("""
                INSERT INTO user_achievements (user_id, achievement_id, earned_at)
                VALUES ($1, $2, $3)
            """, user_id, achievement["id"], datetime.now())
            
        except Exception as e:
            logger.error(f"Error granting achievement {achievement['id']} to user {user_id}: {e}")
            raise
    
    async def get_user_achievements(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = await self.db.fetch("""
                SELECT ua.achievement_id, ua.earned_at,
                       a.name, a.description, a.icon
                FROM user_achievements ua
                JOIN achievements a ON ua.achievement_id = a.id
                WHERE ua.user_id = $1
                ORDER BY ua.earned_at DESC
            """, user_id)
            
            return [dict(row) for row in result]
            
        except Exception as e:
            logger.error(f"Error getting user achievements for {user_id}: {e}")
            return []
    
    
    async def get_achievement_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            total_achievements = await self.db.fetchval(
                "SELECT COUNT(*) FROM user_achievements WHERE user_id = $1",
                user_id
            ) or 0
            
            return {
                "total_achievements": total_achievements
            }
            
        except Exception as e:
            logger.error(f"Error getting achievement stats for {user_id}: {e}")
            return {
                "total_achievements": 0
            }
    
    async def get_recent_achievements(self, user_id: int, limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = await self.db.fetch("""
                SELECT ua.achievement_id, ua.earned_at,
                       a.name, a.description, a.icon
                FROM user_achievements ua
                JOIN achievements a ON ua.achievement_id = a.id
                WHERE ua.user_id = $1
                ORDER BY ua.earned_at DESC
                LIMIT $2
            """, user_id, limit)
            
            return [dict(row) for row in result]
            
        except Exception as e:
            logger.error(f"Error getting recent achievements for {user_id}: {e}")
            return []
    
    def format_achievement_notification(self, achievement: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        return f"""üèÜ **–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!**

{achievement['icon']} **{achievement['name']}**
{achievement['description']}"""

    def format_achievement_list(self, achievements: List[Dict], show_earned: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        if not achievements:
            return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        
        text = "üèÜ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n\n"
        
        for achievement in achievements:
            status = "‚úÖ" if show_earned else "‚ùå"
            
            if show_earned and "earned_at" in achievement:
                earned_date = achievement["earned_at"].strftime("%d.%m.%Y")
                text += f"{status} {achievement['icon']} **{achievement['name']}**\n"
                text += f"   _{achievement['description']}_\n"
                text += f"   üìÖ –ü–æ–ª—É—á–µ–Ω–æ: {earned_date}\n\n"
            else:
                text += f"{status} {achievement['icon']} **{achievement['name']}**\n"
                text += f"   _{achievement['description']}_\n\n"
        
        return text
