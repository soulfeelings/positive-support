import os
import asyncio
import logging
import aiohttp
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
ADMIN_BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN", "")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [
    int(os.getenv("ADMIN_ID", "0")),  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
    # 123456789,  # ID –≤—Ç–æ—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∞
    # 987654321,  # ID —Ç—Ä–µ—Ç—å–µ–≥–æ –∞–¥–º–∏–Ω–∞
]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = int(os.getenv("DB_PORT", "5432"))
DB_USER = os.getenv("DB_USER", "bot_user")
DB_PASSWORD = os.getenv("DB_PASSWORD", "8998")
DB_NAME = os.getenv("DB_NAME", "support_bot")

if not ADMIN_BOT_TOKEN:
    logger.error("ADMIN_BOT_TOKEN not set!")
    exit(1)

logger.info(f"üîß Admin Bot starting with token: {ADMIN_BOT_TOKEN[:10]}...")
logger.info(f"üë• Admin IDs: {ADMIN_IDS}")

bot = Bot(token=ADMIN_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class AdminStates(StatesGroup):
    waiting_nickname = State()
    viewing_user_info = State()

async def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    try:
        conn = await asyncpg.connect(
            host=DB_HOST, port=DB_PORT,
            user=DB_USER, password=DB_PASSWORD,
            database=DB_NAME
        )
        return conn
    except Exception as e:
        logger.error(f"‚ùå Database connection failed: {e}")
        raise

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    if not text:
        return text
    return text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')

def get_unblock_keyboard(user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Å—Ç–∞–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É", callback_data=f"keep_block_{user_id}")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="new_search")
        ]
    ])

async def api_request(endpoint: str, data: dict):
    """HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{BACKEND_URL}/{endpoint}", json=data) as response:
                if response.status != 200:
                    logger.error(f"API returned status {response.status} for {endpoint}")
                    return {"status": "error", "message": f"HTTP {response.status}"}
                result = await response.json()
                return result
    except Exception as e:
        logger.error(f"API error for {endpoint}: {e}")
        return {"status": "error", "message": str(e)}

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞"""
    await state.clear()
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    welcome_text = """üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**

üõ°Ô∏è **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:**
‚Ä¢ –ü–æ–∏—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∂–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –∏ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
3. –ü—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ

üéØ **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /search - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞"""
    
    await message.answer(welcome_text, parse_mode='Markdown')

@dp.message(Command("search"))
async def search_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await state.clear()
    await message.answer("üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode='Markdown')
    await state.set_state(AdminStates.waiting_nickname)

@dp.message(AdminStates.waiting_nickname)
async def handle_nickname_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        await state.clear()
        return
    
    nickname = message.text.strip()
    
    try:
        conn = await get_db_connection()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
        user = await conn.fetchrow(
            "SELECT user_id, nickname, is_blocked, created_at FROM users WHERE nickname ILIKE $1", 
            f"%{nickname}%"
        )
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await conn.close()
            return
        
        user_info_id = user['user_id']
        user_nickname = user['nickname']
        is_blocked = user['is_blocked']
        created_at = user['created_at']
        
        # –ü–æ–ª—É—á–∞–µ–º –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        complaints = await conn.fetch("""
            SELECT id, message_id, complainer_user_id, text, file_id, message_type, complaint_date,
                   u.nickname as complainer_nickname
            FROM complaints c
            LEFT JOIN users u ON c.complainer_user_id = u.user_id
            WHERE c.original_user_id = $1
            ORDER BY c.complaint_date DESC
        """, user_info_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±
        complaints_count = len(complaints)
        
        await conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        safe_nickname = escape_markdown(user_nickname)
        status = "üö´ **–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù**" if is_blocked else "‚úÖ **–ê–∫—Ç–∏–≤–µ–Ω**"
        
        info_text = f"""üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**

üìõ **–ù–∏–∫–Ω–µ–π–º:** {safe_nickname}
üÜî **ID:** `{user_info_id}`
üìä **–°—Ç–∞—Ç—É—Å:** {status}
üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {created_at.strftime('%d.%m.%Y %H:%M')}
üö® **–ñ–∞–ª–æ–± –ø–æ–ª—É—á–µ–Ω–æ:** {complaints_count}"""
        
        if complaints_count > 0:
            info_text += "\n\nüìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∂–∞–ª–æ–±—ã:**"
            
            for i, complaint in enumerate(complaints[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∂–∞–ª–æ–±
                complaint_date = complaint['complaint_date'].strftime('%d.%m.%Y %H:%M')
                complainer_nick = complaint['complainer_nickname'] or f"ID:{complaint['complainer_user_id']}"
                
                if complaint['message_type'] == 'voice':
                    content_type = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ"
                    content = complaint['text'][:50] + "..." if complaint['text'] and len(complaint['text']) > 50 else "[–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
                elif complaint['message_type'] == 'video_note':
                    content_type = "üé• –í–∏–¥–µ–æ"
                    content = complaint['text'][:50] + "..." if complaint['text'] and len(complaint['text']) > 50 else "[–≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫]"
                else:
                    content_type = "üìù –¢–µ–∫—Å—Ç"
                    content = complaint['text'][:100] + "..." if complaint['text'] and len(complaint['text']) > 100 else complaint['text'] or "[—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]"
                
                safe_content = escape_markdown(content)
                safe_complainer = escape_markdown(complainer_nick)
                
                info_text += f"\n\n**{i+1}.** {content_type} ({complaint_date})"
                info_text += f"\n   _–ñ–∞–ª–æ–±–∞ –æ—Ç:_ {safe_complainer}"
                info_text += f"\n   _–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:_ {safe_content}"
        
        if not is_blocked:
            info_text += "\n\n‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**"
            await message.answer(info_text, parse_mode='Markdown')
        else:
            info_text += f"\n\nüö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**"
            if complaints_count >= 5:
                info_text += "\n‚ö†Ô∏è _–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∂–∞–ª–æ–±_"
            
            await message.answer(info_text, parse_mode='Markdown', reply_markup=get_unblock_keyboard(user_info_id))
        
        await state.set_state(AdminStates.viewing_user_info)
        await state.update_data(user_id=user_info_id, nickname=user_nickname)
        
    except Exception as e:
        logger.error(f"Error searching user: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await state.clear()

@dp.callback_query(F.data.startswith("unblock_"))
async def handle_unblock(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    user_id_to_unblock = int(callback.data.split("_")[1])
    
    try:
        conn = await get_db_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await conn.fetchrow(
            "SELECT nickname, is_blocked FROM users WHERE user_id = $1", 
            user_id_to_unblock
        )
        
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer()
            await conn.close()
            return
        
        if not user['is_blocked']:
            await callback.message.edit_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            await callback.answer()
            await conn.close()
            return
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute(
            "UPDATE users SET is_blocked = FALSE WHERE user_id = $1", 
            user_id_to_unblock
        )
        
        await conn.close()
        
        safe_nickname = escape_markdown(user['nickname'])
        success_text = f"""‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**

üë§ **–ù–∏–∫–Ω–µ–π–º:** {safe_nickname}
üÜî **ID:** `{user_id_to_unblock}`
üë®‚Äçüíº **–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:** {escape_markdown(callback.from_user.first_name or '–ê–¥–º–∏–Ω')}

üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"""
        
        await callback.message.edit_text(success_text, parse_mode='Markdown')
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        logger.info(f"Admin {callback.from_user.id} unblocked user {user_id_to_unblock} ({user['nickname']})")
        
    except Exception as e:
        logger.error(f"Error unblocking user: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")
        await callback.answer()
    
    await state.clear()

@dp.callback_query(F.data.startswith("keep_block_"))
async def handle_keep_block(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    user_id_to_keep = int(callback.data.split("_")[2])
    
    try:
        conn = await get_db_connection()
        
        user = await conn.fetchrow(
            "SELECT nickname FROM users WHERE user_id = $1", 
            user_id_to_keep
        )
        
        await conn.close()
        
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer()
            return
        
        safe_nickname = escape_markdown(user['nickname'])
        keep_text = f"""‚ùå **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞**

üë§ **–ù–∏–∫–Ω–µ–π–º:** {safe_nickname}
üÜî **ID:** `{user_id_to_keep}`
üë®‚Äçüíº **–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª:** {escape_markdown(callback.from_user.first_name or '–ê–¥–º–∏–Ω')}

üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º"""
        
        await callback.message.edit_text(keep_text, parse_mode='Markdown')
        await callback.answer("‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞")
        
        logger.info(f"Admin {callback.from_user.id} kept block for user {user_id_to_keep} ({user['nickname']})")
        
    except Exception as e:
        logger.error(f"Error keeping block: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞")
        await callback.answer()
    
    await state.clear()

@dp.callback_query(F.data == "new_search")
async def handle_new_search(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback.message.edit_text("üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode='Markdown')
    await state.set_state(AdminStates.waiting_nickname)
    await callback.answer()

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    try:
        conn = await get_db_connection()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = await conn.fetchval("SELECT COUNT(*) FROM users") or 0
        blocked_users = await conn.fetchval("SELECT COUNT(*) FROM users WHERE is_blocked = TRUE") or 0
        total_complaints = await conn.fetchval("SELECT COUNT(*) FROM complaints") or 0
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∂–∞–ª–æ–±–∞–º
        top_complained = await conn.fetch("""
            SELECT c.original_user_id, u.nickname, u.is_blocked, COUNT(*) as complaint_count
            FROM complaints c
            LEFT JOIN users u ON c.original_user_id = u.user_id
            GROUP BY c.original_user_id, u.nickname, u.is_blocked
            ORDER BY complaint_count DESC
            LIMIT 10
        """)
        
        await conn.close()
        
        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**

üë• **–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: **{blocked_users}**
‚Ä¢ –í—Å–µ–≥–æ –∂–∞–ª–æ–±: **{total_complaints}**

üö® **–¢–æ–ø –ø–æ –∂–∞–ª–æ–±–∞–º:**"""
        
        for i, user in enumerate(top_complained, 1):
            nickname = user['nickname'] or f"ID:{user['original_user_id']}"
            safe_nickname = escape_markdown(nickname)
            status = "üö´" if user['is_blocked'] else "‚úÖ"
            complaint_count = user['complaint_count']
            
            stats_text += f"\n{i}. {status} {safe_nickname} - **{complaint_count}** –∂–∞–ª–æ–±"
        
        if not top_complained:
            stats_text += "\n_–ü–æ–∫–∞ –Ω–µ—Ç –∂–∞–ª–æ–±_"
        
        await message.answer(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–±–æ—Ç—É"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    help_text = """üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**

üìã **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/search` - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ
‚Ä¢ –ü–æ–∏—Å–∫ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏ –∂–∞–ª–æ–±–∞—Ö

‚öñÔ∏è **–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ

üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"""
    
    await message.answer(help_text, parse_mode='Markdown')

@dp.message()
async def unknown(message: types.Message, state: FSMContext):
    """–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–∏–∫–Ω–µ–π–º
    current_state = await state.get_state()
    if current_state == AdminStates.waiting_nickname.state:
        await handle_nickname_search(message, state)
        return
    
    await message.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

async def main():
    """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–±–æ—Ç–∞"""
    logger.info("Starting admin bot...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
