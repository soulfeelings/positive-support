import os
import asyncio
import logging
import aiohttp
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
ADMIN_BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN", "8233417802:AAGyzmvx1m7MdhGFN-Jk3tTjJ7Q_NgV16h8")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [
    int(os.getenv("ADMIN_ID", "8166609254")),  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
    # 123456789,  # ID –≤—Ç–æ—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∞
    # 987654321,  # ID —Ç—Ä–µ—Ç—å–µ–≥–æ –∞–¥–º–∏–Ω–∞
]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = int(os.getenv("DB_PORT", "5432"))
DB_USER = os.getenv("DB_USER", "bot_user")
DB_PASSWORD = os.getenv("DB_PASSWORD", "8998")
DB_NAME = os.getenv("DB_NAME", "support_bot")

logger.info(f"üîß Admin Bot starting...")
logger.info(f"üë• Admin IDs: {ADMIN_IDS}")
logger.info(f"üåê Backend URL: {BACKEND_URL}")
logger.info(f"üìä Database: {DB_HOST}:{DB_PORT}/{DB_NAME}")

bot = Bot(token=ADMIN_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class AdminStates(StatesGroup):
    waiting_nickname = State()
    viewing_user_info = State()

async def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    try:
        conn = await asyncpg.connect(
            host=DB_HOST, port=DB_PORT,
            user=DB_USER, password=DB_PASSWORD,
            database=DB_NAME
        )
        return conn
    except Exception as e:
        logger.error(f"‚ùå Database connection failed: {e}")
        raise

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    if not text:
        return text
    return text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')

def get_admin_keyboard(user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±", callback_data=f"change_complaints_{user_id}")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="new_search")
        ]
    ])

def get_complaints_keyboard(user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="0Ô∏è‚É£ –û–±–Ω—É–ª–∏—Ç—å –∂–∞–ª–æ–±—ã", callback_data=f"set_complaints_{user_id}_0"),
            InlineKeyboardButton(text="1Ô∏è‚É£ –û–¥–Ω–∞ –∂–∞–ª–æ–±–∞", callback_data=f"set_complaints_{user_id}_1")
        ],
        [
            InlineKeyboardButton(text="2Ô∏è‚É£ –î–≤–µ –∂–∞–ª–æ–±—ã", callback_data=f"set_complaints_{user_id}_2"),
            InlineKeyboardButton(text="3Ô∏è‚É£ –¢—Ä–∏ –∂–∞–ª–æ–±—ã", callback_data=f"set_complaints_{user_id}_3")
        ],
        [
            InlineKeyboardButton(text="4Ô∏è‚É£ –ß–µ—Ç—ã—Ä–µ –∂–∞–ª–æ–±—ã", callback_data=f"set_complaints_{user_id}_4"),
            InlineKeyboardButton(text="5Ô∏è‚É£ –ü—è—Ç—å –∂–∞–ª–æ–±", callback_data=f"set_complaints_{user_id}_5")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="new_search")
        ]
    ])

async def api_request(endpoint: str, data: dict):
    """HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{BACKEND_URL}/{endpoint}", json=data) as response:
                if response.status != 200:
                    logger.error(f"API returned status {response.status} for {endpoint}")
                    return {"status": "error", "message": f"HTTP {response.status}"}
                result = await response.json()
                return result
    except Exception as e:
        logger.error(f"API error for {endpoint}: {e}")
        return {"status": "error", "message": str(e)}

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞"""
    await state.clear()
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    welcome_text = """üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**

üõ°Ô∏è **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:**
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∂–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∂–∞–ª–æ–± (0-5)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞

üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –∏ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∂–∞–ª–æ–±—ã
3. –ù–∞–∂–º–∏—Ç–µ "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±"
4. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (0-5)

üéØ **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /search - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞"""
    
    await message.answer(welcome_text, parse_mode='Markdown')

@dp.message(Command("search"))
async def search_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await state.clear()
    await message.answer("üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode='Markdown')
    await state.set_state(AdminStates.waiting_nickname)

@dp.message(AdminStates.waiting_nickname)
async def handle_nickname_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        await state.clear()
        return
    
    nickname = message.text.strip()
    
    try:
        conn = await get_db_connection()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
        user = await conn.fetchrow(
            "SELECT user_id, nickname, is_blocked, created_at FROM users WHERE nickname ILIKE $1", 
            f"%{nickname}%"
        )
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await conn.close()
            return
        
        user_info_id = user['user_id']
        user_nickname = user['nickname']
        is_blocked = user['is_blocked']
        created_at = user['created_at']
        
        # –ü–æ–ª—É—á–∞–µ–º –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        complaints = await conn.fetch("""
            SELECT id, message_id, complainer_user_id, text, file_id, message_type, complaint_date,
                   u.nickname as complainer_nickname
            FROM complaints c
            LEFT JOIN users u ON c.complainer_user_id = u.user_id
            WHERE c.original_user_id = $1
            ORDER BY c.complaint_date DESC
        """, user_info_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±
        complaints_count = len(complaints)
        
        await conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        safe_nickname = escape_markdown(user_nickname)
        status = "üö´ **–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù**" if is_blocked else "‚úÖ **–ê–∫—Ç–∏–≤–µ–Ω**"
        
        info_text = f"""üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**

üìõ **–ù–∏–∫–Ω–µ–π–º:** {safe_nickname}
üÜî **ID:** `{user_info_id}`
üìä **–°—Ç–∞—Ç—É—Å:** {status}
üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {created_at.strftime('%d.%m.%Y %H:%M')}
üö® **–ñ–∞–ª–æ–± –ø–æ–ª—É—á–µ–Ω–æ:** {complaints_count}"""
        
        if complaints_count > 0:
            info_text += "\n\nüìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∂–∞–ª–æ–±—ã:**"
            
            for i, complaint in enumerate(complaints[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∂–∞–ª–æ–±
                complaint_date = complaint['complaint_date'].strftime('%d.%m.%Y %H:%M')
                complainer_nick = complaint['complainer_nickname'] or f"ID:{complaint['complainer_user_id']}"
                
                if complaint['message_type'] == 'voice':
                    content_type = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ"
                    content = complaint['text'][:50] + "..." if complaint['text'] and len(complaint['text']) > 50 else "[–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
                elif complaint['message_type'] == 'video_note':
                    content_type = "üé• –í–∏–¥–µ–æ"
                    content = complaint['text'][:50] + "..." if complaint['text'] and len(complaint['text']) > 50 else "[–≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫]"
                else:
                    content_type = "üìù –¢–µ–∫—Å—Ç"
                    content = complaint['text'][:100] + "..." if complaint['text'] and len(complaint['text']) > 100 else complaint['text'] or "[—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]"
                
                safe_content = escape_markdown(content)
                safe_complainer = escape_markdown(complainer_nick)
                
                info_text += f"\n\n**{i+1}.** {content_type} ({complaint_date})"
                info_text += f"\n   _–ñ–∞–ª–æ–±–∞ –æ—Ç:_ {safe_complainer}"
                info_text += f"\n   _–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:_ {safe_content}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if is_blocked:
            info_text += f"\n\nüö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**"
            if complaints_count >= 5:
                info_text += "\n‚ö†Ô∏è _–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∂–∞–ª–æ–±_"
        else:
            info_text += "\n\n‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**"
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await message.answer(info_text, parse_mode='Markdown', reply_markup=get_admin_keyboard(user_info_id))
        
        await state.set_state(AdminStates.viewing_user_info)
        await state.update_data(user_id=user_info_id, nickname=user_nickname)
        
    except Exception as e:
        logger.error(f"Error searching user: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await state.clear()

@dp.callback_query(F.data.startswith("change_complaints_"))
async def handle_change_complaints(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    user_id = int(callback.data.split("_")[2])
    
    try:
        conn = await get_db_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await conn.fetchrow(
            "SELECT nickname FROM users WHERE user_id = $1", 
            user_id
        )
        
        await conn.close()
        
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer()
            return
        
        safe_nickname = escape_markdown(user['nickname'])
        choice_text = f"""üìä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {safe_nickname}
üÜî **ID:** `{user_id}`

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±:"""
        
        await callback.message.edit_text(choice_text, parse_mode='Markdown', reply_markup=get_complaints_keyboard(user_id))
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing complaints menu: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞")
        await callback.answer()

@dp.callback_query(F.data.startswith("set_complaints_"))
async def handle_set_complaints(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    parts = callback.data.split("_")
    user_id = int(parts[2])
    new_complaints_count = int(parts[3])
    
    try:
        conn = await get_db_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await conn.fetchrow(
            "SELECT nickname, is_blocked FROM users WHERE user_id = $1", 
            user_id
        )
        
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer()
            await conn.close()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        current_complaints = await conn.fetchval(
            "SELECT COUNT(*) FROM complaints WHERE original_user_id = $1", 
            user_id
        ) or 0
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∂–∞–ª–æ–±—ã
        await conn.execute(
            "DELETE FROM complaints WHERE original_user_id = $1", 
            user_id
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ "—Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ" –∂–∞–ª–æ–±—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if new_complaints_count > 0:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            from datetime import datetime
            current_time = datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            system_user_id = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            system_exists = await conn.fetchval(
                "SELECT user_id FROM users WHERE user_id = $1", 
                system_user_id
            )
            
            if not system_exists:
                # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await conn.execute(
                    """INSERT INTO users (user_id, nickname, is_blocked, created_at)
                       VALUES ($1, $2, $3, $4) 
                       ON CONFLICT (user_id) DO NOTHING""",
                    system_user_id,
                    "–°–∏—Å—Ç–µ–º–∞",
                    False,
                    current_time
                )
            
            complainer_id = system_user_id
            
            for i in range(new_complaints_count):
                await conn.execute(
                    """INSERT INTO complaints (original_user_id, complainer_user_id, text, message_type, created_at, complaint_date)
                       VALUES ($1, $2, $3, $4, $5, $6)""",
                    user_id,
                    complainer_id,
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ #{i+1}",
                    'text',
                    current_time,
                    current_time
                )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±
        should_be_blocked = new_complaints_count >= 5
        await conn.execute(
            "UPDATE users SET is_blocked = $1 WHERE user_id = $2", 
            should_be_blocked, user_id
        )
        
        await conn.close()
        
        safe_nickname = escape_markdown(user['nickname'])
        block_status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if should_be_blocked else "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if new_complaints_count == 0:
            action_description = "üßπ –ü–æ–ª–Ω–∞—è –∞–º–Ω–∏—Å—Ç–∏—è - –≤—Å–µ –∂–∞–ª–æ–±—ã –æ–±–Ω—É–ª–µ–Ω—ã"
        elif new_complaints_count < current_complaints:
            action_description = f"üìâ –ñ–∞–ª–æ–± —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ (–±—ã–ª–æ {current_complaints} ‚Üí —Å—Ç–∞–ª–æ {new_complaints_count})"
        elif new_complaints_count > current_complaints:
            action_description = f"üìà –ñ–∞–ª–æ–± —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ (–±—ã–ª–æ {current_complaints} ‚Üí —Å—Ç–∞–ª–æ {new_complaints_count})"
        else:
            action_description = f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º ({new_complaints_count})"

        success_text = f"""üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –∏–∑–º–µ–Ω–µ–Ω–æ**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {safe_nickname}
üÜî **ID:** `{user_id}`
üë®‚Äçüíº **–ò–∑–º–µ–Ω–∏–ª:** {escape_markdown(callback.from_user.first_name or '–ê–¥–º–∏–Ω')}

{action_description}
üîÑ **–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:** {block_status}

{'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ 5+ –∂–∞–ª–æ–±' if should_be_blocked else '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º'}"""
        
        await callback.message.edit_text(success_text, parse_mode='Markdown')
        await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –∏–∑–º–µ–Ω–µ–Ω–æ")
        
        logger.info(f"Admin {callback.from_user.id} changed complaints for user {user_id} ({user['nickname']}) from {current_complaints} to {new_complaints_count}")
        
    except Exception as e:
        logger.error(f"Error setting complaints: {e}")
        logger.error(f"Error details: user_id={user_id}, new_count={new_complaints_count}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±: {str(e)[:100]}")
        await callback.answer()
    
    await state.clear()

@dp.callback_query(F.data == "new_search")
async def handle_new_search(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback.message.edit_text("üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode='Markdown')
    await state.set_state(AdminStates.waiting_nickname)
    await callback.answer()

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    try:
        conn = await get_db_connection()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = await conn.fetchval("SELECT COUNT(*) FROM users") or 0
        blocked_users = await conn.fetchval("SELECT COUNT(*) FROM users WHERE is_blocked = TRUE") or 0
        total_complaints = await conn.fetchval("SELECT COUNT(*) FROM complaints") or 0
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∂–∞–ª–æ–±–∞–º
        top_complained = await conn.fetch("""
            SELECT c.original_user_id, u.nickname, u.is_blocked, COUNT(*) as complaint_count
            FROM complaints c
            LEFT JOIN users u ON c.original_user_id = u.user_id
            GROUP BY c.original_user_id, u.nickname, u.is_blocked
            ORDER BY complaint_count DESC
            LIMIT 10
        """)
        
        await conn.close()
        
        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**

üë• **–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: **{blocked_users}**
‚Ä¢ –í—Å–µ–≥–æ –∂–∞–ª–æ–±: **{total_complaints}**

üö® **–¢–æ–ø –ø–æ –∂–∞–ª–æ–±–∞–º:**"""
        
        for i, user in enumerate(top_complained, 1):
            nickname = user['nickname'] or f"ID:{user['original_user_id']}"
            safe_nickname = escape_markdown(nickname)
            status = "üö´" if user['is_blocked'] else "‚úÖ"
            complaint_count = user['complaint_count']
            
            stats_text += f"\n{i}. {status} {safe_nickname} - **{complaint_count}** –∂–∞–ª–æ–±"
        
        if not top_complained:
            stats_text += "\n_–ü–æ–∫–∞ –Ω–µ—Ç –∂–∞–ª–æ–±_"
            await message.answer(stats_text, parse_mode='Markdown')
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            
            for i, user in enumerate(top_complained[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –∫–Ω–æ–ø–æ–∫
                nickname = user['nickname'] or f"ID:{user['original_user_id']}"
                safe_nickname = escape_markdown(nickname)[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –∫–Ω–æ–ø–∫–∏
                user_id = user['original_user_id']
                complaint_count = user['complaint_count']
                
                button_text = f"{i}. {safe_nickname} ({complaint_count})"
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text=button_text, callback_data=f"change_complaints_{user_id}")
                ])
            
            stats_text += "\n\nüí° _–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±_"
            await message.answer(stats_text, parse_mode='Markdown', reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–±–æ—Ç—É"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    help_text = """üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**

üìã **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/search` - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ
‚Ä¢ –ü–æ–∏—Å–∫ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏ –∂–∞–ª–æ–±–∞—Ö

üìä **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±–∞–º–∏:**
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–± (0-5)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ 5+ –∂–∞–ª–æ–±–∞—Ö
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏)

‚öñÔ∏è **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û–±–Ω—É–ª–∏—Ç—å –∂–∞–ª–æ–±—ã - –ø–æ–ª–Ω–∞—è "–∞–º–Ω–∏—Å—Ç–∏—è"
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 1-4 –∂–∞–ª–æ–±—ã - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 5 –∂–∞–ª–æ–± - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    
    await message.answer(help_text, parse_mode='Markdown')

@dp.message()
async def unknown(message: types.Message, state: FSMContext):
    """–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–∏–∫–Ω–µ–π–º
    current_state = await state.get_state()
    if current_state == AdminStates.waiting_nickname.state:
        await handle_nickname_search(message, state)
        return
    
    await message.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

async def main():
    """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–±–æ—Ç–∞"""
    logger.info("Starting admin bot...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
