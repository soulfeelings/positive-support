#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

–ó–∞–ø—É—Å–∫: python test_filter.py
"""

import asyncio
from message_filter import get_message_filter

def test_message_filter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n")
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞
    filter_instance = get_message_filter()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        ("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        ("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!", "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é"),
        ("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏"),
        
        # –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        ("–ë–ª—è—Ç—å, —á—Ç–æ –∑–∞ —Ö—Ä–µ–Ω—å", "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º"),
        ("–≠—Ç–æ –ø–æ–ª–Ω–∞—è —Ö—É–π–Ω—è", "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º"),
        ("Fuck this shit", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –º–∞—Ç"),
        
        # –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
        ("–¢—ã –∏–¥–∏–æ—Ç!", "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ"),
        ("–ö–∞–∫–æ–π –∂–µ —Ç—ã –¥–µ–±–∏–ª", "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ"),
        ("You are stupid", "–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ"),
        
        # –°—Å—ã–ª–∫–∏
        ("–ü–æ—Å–º–æ—Ç—Ä–∏ https://example.com", "HTTP —Å—Å—ã–ª–∫–∞"),
        ("–ú–æ–π Instagram @username", "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        ("–•–µ—à—Ç–µ–≥ #support", "–•–µ—à—Ç–µ–≥"),
        ("–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ bit.ly/abc123", "–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞"),
        
        # –°–ø–∞–º
        ("!!!!!!!!!!!!!", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏"),
        ("–í–°–ï –ó–ê–ì–õ–ê–í–ù–´–ï –ë–£–ö–í–´", "–í—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ"),
        ("–∞ –± –≤ –≥ –¥ –µ —ë –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —ä —ã —å —ç —é —è", "–ö–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞"),
        ("!@#$%^&*()", "–ú–Ω–æ–≥–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤"),
        
        # –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏
        ("–ü–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –°–ø–∞—Å–∏–±–æ!", "–°–º–µ—à–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        ("–≠—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –±–ª—è—Ç—å! https://example.com", "–ú–∞—Ç + —Å—Å—ã–ª–∫–∞"),
    ]
    
    print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è:\n")
    
    for i, (message, description) in enumerate(test_messages, 1):
        print(f"{i:2d}. {description}:")
        print(f"    –°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = filter_instance.check_message(12345, message, "text")
        
        if result.is_blocked:
            print(f"    ‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û: {result.reason}")
            print(f"    üìã –î–µ—Ç–∞–ª–∏: {result.details}")
            print(f"    ‚ö†Ô∏è  –£—Ä–æ–≤–µ–Ω—å: {result.severity}")
        else:
            print(f"    ‚úÖ –ü–†–û–®–õ–û")
        
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\n‚öôÔ∏è  –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:")
    print(f"   –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É: {filter_instance.max_messages_per_minute}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è:")
    exception_tests = [
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!",
        "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "–•–æ—Ä–æ—à–æ, –ø–æ–Ω—è–ª",
        "–ü–ª–æ—Ö–æ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é"
    ]
    
    for message in exception_tests:
        result = filter_instance.check_message(12345, message, "text")
        if result.is_blocked:
            print(f"   ‚ùå '{message}' - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        else:
            print(f"   ‚úÖ '{message}' - –ø—Ä–æ—à–ª–æ")

def test_filter_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:\n")
    
    try:
        from filter_config import (
            get_filter_settings, get_bad_words, get_offensive_words,
            get_link_patterns, get_spam_patterns, get_exception_words
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = get_filter_settings()
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        for key, value in settings.items():
            print(f"   {key}: {value}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Å–ª–æ–≤
        bad_words = get_bad_words()
        offensive_words = get_offensive_words()
        exception_words = get_exception_words()
        
        print(f"\n‚úÖ –°–ø–∏—Å–∫–∏ —Å–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        print(f"   –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤: {len(bad_words)}")
        print(f"   –û—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {len(offensive_words)}")
        print(f"   –°–ª–æ–≤-–∏—Å–∫–ª—é—á–µ–Ω–∏–π: {len(exception_words)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        link_patterns = get_link_patterns()
        spam_patterns = get_spam_patterns()
        
        print(f"\n‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å—Å—ã–ª–æ–∫: {len(link_patterns)}")
        print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–ø–∞–º–∞: {len(spam_patterns)}")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        test_message_filter()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        test_filter_config()
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
