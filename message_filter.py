import re
import logging
import asyncio
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from filter_config import (
    get_filter_settings, get_bad_words, get_offensive_words,
    get_link_patterns, get_spam_patterns, get_exception_words
)

logger = logging.getLogger(__name__)

@dataclass
class FilterResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞"""
    is_blocked: bool
    reason: str
    details: str
    severity: str  # 'warning', 'block', 'auto_block'

class MessageFilter:
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º–∞—Ç, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —Å–ø–∞–º –∏ —Å—Å—ã–ª–∫–∏"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.settings = get_filter_settings()
        
        # –°–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤
        self.bad_words = get_bad_words()
        
        # –°–ø–∏—Å–æ–∫ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        self.offensive_words = get_offensive_words()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Å—ã–ª–æ–∫
        self.link_patterns = get_link_patterns()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–ø–∞–º–∞
        self.spam_patterns = get_spam_patterns()
        
        # –°–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è
        self.exception_words = get_exception_words()
        
        # –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø–∞–º–∞
        self.user_message_count: Dict[int, int] = {}
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_last_message_time: Dict[int, float] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.max_messages_per_minute = self.settings["max_messages_per_minute"]
        
    def check_message(self, user_id: int, text: str, message_type: str = "text") -> FilterResult:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ —Ç–∏–ø—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            FilterResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        if not text or message_type != "text":
            return FilterResult(False, "", "", "pass")
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text[:50]}...'")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è
        text_lower = text.lower()
        for exception_word in self.exception_words:
            if exception_word in text_lower:
                logger.info(f"‚úÖ –°–ª–æ–≤–æ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: '{exception_word}'")
                return FilterResult(False, "", "", "pass")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if self.settings.get("enable_bad_words_check", True):
            mat_result = self._check_bad_words(text)
            if mat_result.is_blocked:
                logger.warning(f"üö´ –ú–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {mat_result.details}")
                return mat_result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if self.settings.get("enable_offensive_words_check", True):
            offensive_result = self._check_offensive_words(text)
            if offensive_result.is_blocked:
                logger.warning(f"üö´ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {offensive_result.details}")
                return offensive_result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if self.settings.get("enable_links_check", True):
            link_result = self._check_links(text)
            if link_result.is_blocked:
                logger.warning(f"üö´ –°—Å—ã–ª–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {link_result.details}")
                return link_result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if self.settings.get("enable_spam_check", True):
            spam_result = self._check_spam(user_id, text)
            if spam_result.is_blocked:
                logger.warning(f"üö´ –°–ø–∞–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {spam_result.details}")
                return spam_result
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._update_user_message_count(user_id)
        
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É")
        return FilterResult(False, "", "", "pass")
    
    def _check_bad_words(self, text: str) -> FilterResult:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞"""
        text_lower = text.lower()
        found_words = []
        
        for word in self.bad_words:
            if word in text_lower:
                found_words.append(word)
        
        if found_words:
            return FilterResult(
                is_blocked=True,
                reason="bad_words",
                details=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {', '.join(found_words[:3])}",
                severity="block"
            )
        
        return FilterResult(False, "", "", "pass")
    
    def _check_offensive_words(self, text: str) -> FilterResult:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞"""
        text_lower = text.lower()
        found_words = []
        
        for word in self.offensive_words:
            if word in text_lower:
                found_words.append(word)
        
        if found_words:
            return FilterResult(
                is_blocked=True,
                reason="offensive_words",
                details=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {', '.join(found_words[:3])}",
                severity="block"
            )
        
        return FilterResult(False, "", "", "pass")
    
    def _check_links(self, text: str) -> FilterResult:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Å—Å—ã–ª–∫–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        found_links = []
        
        for pattern in self.link_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            found_links.extend(matches)
        
        if found_links:
            return FilterResult(
                is_blocked=True,
                reason="links",
                details=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {', '.join(found_links[:3])}",
                severity="block"
            )
        
        return FilterResult(False, "", "", "pass")
    
    def _check_spam(self, user_id: int, text: str) -> FilterResult:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Å–ø–∞–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø–∞–º–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        for pattern in self.spam_patterns:
            if re.search(pattern, text):
                return FilterResult(
                    is_blocked=True,
                    reason="spam_pattern",
                    details="–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Ç–µ–∫—Å—Ç–µ",
                    severity="block"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π
        spam_check = self._check_spam_frequency(user_id)
        if spam_check["is_spamming"]:
            return FilterResult(
                is_blocked=True,
                reason="spam_frequency",
                details=spam_check["message"],
                severity="block"
            )
        
        return FilterResult(False, "", "", "pass")
    
    def _check_spam_frequency(self, user_id: int) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        import time
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_time = self.user_last_message_time.get(user_id, 0)
        if current_time - last_message_time >= 60:  # 60 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
            self.user_message_count[user_id] = 0
            self.user_last_message_time[user_id] = current_time
            return {"is_spamming": False, "message": ""}
        
        current_count = self.user_message_count.get(user_id, 0)
        if current_count >= self.max_messages_per_minute:
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            time_remaining = 60 - (current_time - last_message_time)
            minutes = int(time_remaining // 60)
            seconds = int(time_remaining % 60)
            
            if minutes > 0:
                time_str = f"{minutes}–º {seconds}—Å"
            else:
                time_str = f"{seconds}—Å"
            
            return {
                "is_spamming": True,
                "message": f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_str}"
            }
        
        return {"is_spamming": False, "message": ""}
    
    def _is_user_spamming(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ø–∞–º–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        import time
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_time = self.user_last_message_time.get(user_id, 0)
        if current_time - last_message_time >= 60:  # 60 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
            self.user_message_count[user_id] = 0
            self.user_last_message_time[user_id] = current_time
            return False
        
        current_count = self.user_message_count.get(user_id, 0)
        return current_count >= self.max_messages_per_minute
    
    def _update_user_message_count(self, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import time
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_time = self.user_last_message_time.get(user_id, 0)
        if current_time - last_message_time >= 60:  # 60 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
            self.user_message_count[user_id] = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –≤—Ä–µ–º—è
        self.user_message_count[user_id] = self.user_message_count.get(user_id, 0) + 1
        self.user_last_message_time[user_id] = current_time
    
    def reset_user_counters(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_message_count[user_id] = 0
        self.user_last_message_time[user_id] = 0
    
    def add_custom_bad_word(self, word: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–µ —Å–ª–æ–≤–æ"""
        self.bad_words.add(word.lower())
    
    def add_custom_offensive_word(self, word: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ"""
        self.offensive_words.add(word.lower())
    
    def remove_custom_word(self, word: str, word_type: str = "bad"):
        """–£–¥–∞–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ"""
        word = word.lower()
        if word_type == "bad":
            self.bad_words.discard(word)
        elif word_type == "offensive":
            self.offensive_words.discard(word)
    
    def _start_cleanup_task(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
            if not hasattr(self, '_cleanup_task') or self._cleanup_task.done():
                self._cleanup_task = asyncio.create_task(self._cleanup_counters())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
    
    async def _cleanup_counters(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        import time
        while True:
            try:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                current_time = time.time()
                
                # –£–¥–∞–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–∏—Å–∞–ª–∏ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
                users_to_remove = []
                for user_id, last_time in self.user_last_message_time.items():
                    if current_time - last_time >= 60:  # 60 —Å–µ–∫—É–Ω–¥
                        users_to_remove.append(user_id)
                
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for user_id in users_to_remove:
                    self.user_message_count.pop(user_id, None)
                    self.user_last_message_time.pop(user_id, None)
                
                if users_to_remove:
                    logger.info(f"–û—á–∏—â–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è {len(users_to_remove)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞
message_filter = MessageFilter()

def get_message_filter() -> MessageFilter:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return message_filter
