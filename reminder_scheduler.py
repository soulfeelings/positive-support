"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è —Å 12:00 –¥–æ 20:00.
"""

import asyncio
import os
import random
import requests
import logging
from datetime import datetime, timedelta
from typing import Dict, List
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")
TIMEZONE = pytz.timezone('Europe/Moscow')  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –Ω—É–∂–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É

class ReminderScheduler:
    def __init__(self):
        self.user_last_seen_ids: Dict[int, int] = {}
        self.sent_today: set = set()
        self.last_reset_date = datetime.now(TIMEZONE).date()
        
    def reset_daily_tracking(self):
        """–°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –ø–æ–ª–Ω–æ—á—å"""
        current_date = datetime.now(TIMEZONE).date()
        if current_date != self.last_reset_date:
            self.sent_today.clear()
            self.last_reset_date = current_date
            logger.info("üîÑ Daily reminder tracking reset")
    
    def is_sending_time(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 12:00-20:00"""
        now = datetime.now(TIMEZONE)
        return 12 <= now.hour < 20
    
    def get_random_delay_until_next_check(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30-90 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        if self.is_sending_time():
            return random.randint(30 * 60, 90 * 60)  # 30-90 –º–∏–Ω—É—Ç
        else:
            # –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–µ - –∫–∞–∂–¥—ã–µ 2-4 —á–∞—Å–∞
            return random.randint(2 * 60 * 60, 4 * 60 * 60)  # 2-4 —á–∞—Å–∞
    
    async def get_users_with_reminders(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
        try:
            response = requests.get(f"{API_BASE_URL}/get_users_with_reminders", timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data.get("status") == "ok":
                    return data.get("user_ids", [])
            return []
        except Exception as e:
            logger.error(f"Error getting users with reminders: {e}")
            return []
    
    async def get_reminder_message(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            last_seen_id = self.user_last_seen_ids.get(user_id, 0)
            
            response = requests.post(
                f"{API_BASE_URL}/get_reminder_message",
                json={"user_id": user_id, "last_seen_id": last_seen_id},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("status") == "ok":
                    message_data = data.get("message", {})
                    # –û–±–Ω–æ–≤–ª—è–µ–º last_seen_id –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    self.user_last_seen_ids[user_id] = message_data.get("id", last_seen_id)
                    return message_data
            return {}
        except Exception as e:
            logger.error(f"Error getting reminder message for user {user_id}: {e}")
            return {}
    
    def format_message_text(self, message_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        nickname = message_data.get("nickname", "–ê–Ω–æ–Ω–∏–º")
        text = message_data.get("text", "")
        
        return f"üíù **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ**\n\n{text}\n\n_‚Äî {nickname}_\n\nüí≠ –ü–æ–º–Ω–∏: —Ç—ã –Ω–µ –æ–¥–∏–Ω, –∏ –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è! üåü"
    
    async def send_telegram_message(self, user_id: int, text: str, file_id: str = None, message_type: str = "text"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API"""
        try:
            if message_type == "voice" and file_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendVoice"
                data = {
                    "chat_id": user_id,
                    "voice": file_id,
                    "caption": text,
                    "parse_mode": "Markdown"
                }
            elif message_type == "video_note" and file_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendVideoNote"
                data = {
                    "chat_id": user_id,
                    "video_note": file_id
                }
                response = requests.post(url, json=data, timeout=10)
                
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                data = {
                    "chat_id": user_id,
                    "text": text,
                    "parse_mode": "Markdown"
                }
            else:
                # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                data = {
                    "chat_id": user_id,
                    "text": text,
                    "parse_mode": "Markdown"
                }
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Reminder sent to user {user_id}")
                return True
            else:
                logger.error(f"‚ùå Failed to send reminder to user {user_id}: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"Error sending reminder to user {user_id}: {e}")
            return False
    
    async def send_reminder_to_user(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            message_data = await self.get_reminder_message(user_id)
            
            if not message_data:
                logger.info(f"No reminder message available for user {user_id}")
                return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = self.format_message_text(message_data)
            file_id = message_data.get("file_id")
            message_type = message_data.get("message_type", "text")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            success = await self.send_telegram_message(user_id, text, file_id, message_type)
            
            if success:
                self.sent_today.add(user_id)
                logger.info(f"üì¨ Reminder sent to user {user_id} (message_id: {message_data.get('id')})")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending reminder to user {user_id}: {e}")
            return False
    
    async def process_reminders(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.reset_daily_tracking()
        
        if not self.is_sending_time():
            logger.info("‚è∞ Not in sending time window (12:00-20:00)")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        users = await self.get_users_with_reminders()
        
        if not users:
            logger.info("üì≠ No users with enabled reminders found")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
        eligible_users = [user_id for user_id in users if user_id not in self.sent_today]
        
        if not eligible_users:
            logger.info("üì´ All eligible users already received reminders today")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (10-30% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
        max_users = max(1, len(eligible_users) // 3)  # –ú–∞–∫—Å–∏–º—É–º —Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        num_users_to_send = random.randint(1, max_users)
        
        selected_users = random.sample(eligible_users, min(num_users_to_send, len(eligible_users)))
        
        logger.info(f"üì§ Sending reminders to {len(selected_users)} users out of {len(eligible_users)} eligible")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        successful_sends = 0
        for user_id in selected_users:
            success = await self.send_reminder_to_user(user_id)
            if success:
                successful_sends += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(random.uniform(1, 3))
        
        logger.info(f"‚úÖ Successfully sent {successful_sends}/{len(selected_users)} reminders")
    
    async def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üöÄ Reminder scheduler started")
        
        while True:
            try:
                await self.process_reminders()
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                delay = self.get_random_delay_until_next_check()
                next_check = datetime.now(TIMEZONE) + timedelta(seconds=delay)
                
                logger.info(f"‚è≥ Next reminder check at: {next_check.strftime('%H:%M:%S')} (in {delay//60} minutes)")
                
                await asyncio.sleep(delay)
                
            except Exception as e:
                logger.error(f"Error in reminder scheduler: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º 10 –º–∏–Ω—É—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
                await asyncio.sleep(600)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN environment variable is required")
        return
    
    scheduler = ReminderScheduler()
    await scheduler.run_scheduler()

if __name__ == "__main__":
    asyncio.run(main())
