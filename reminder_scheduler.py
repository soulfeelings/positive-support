import os
import asyncio
import logging
import aiohttp
import random
from datetime import datetime, time
from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
import asyncpg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "8234250977:AAFSjY7Ci-xajOeB-JqRgWB2vTVtQaW9UCc")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = int(os.getenv("DB_PORT", "5432"))
DB_USER = os.getenv("DB_USER", "bot_user")
DB_PASSWORD = os.getenv("DB_PASSWORD", "8998")
DB_NAME = os.getenv("DB_NAME", "support_bot")

# –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (12:00 - 20:00)
REMINDER_START_HOUR = 12
REMINDER_END_HOUR = 20

bot = Bot(token=BOT_TOKEN)

async def get_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    try:
        conn = await asyncpg.connect(
            host=DB_HOST, port=DB_PORT,
            user=DB_USER, password=DB_PASSWORD,
            database=DB_NAME
        )
        return conn
    except Exception as e:
        logger.error(f"‚ùå Database connection failed: {e}")
        raise

async def api_request(endpoint: str, data: dict):
    """HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{BACKEND_URL}/{endpoint}", json=data) as response:
                if response.status != 200:
                    logger.error(f"API returned status {response.status} for {endpoint}")
                    return {"status": "error", "message": f"HTTP {response.status}"}
                result = await response.json()
                return result
    except Exception as e:
        logger.error(f"API error for {endpoint}: {e}")
        return {"status": "error", "message": str(e)}

async def get_users_for_reminders():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    try:
        conn = await get_connection()
        users = await conn.fetch("""
            SELECT user_id, nickname, last_reminder_message_id 
            FROM users 
            WHERE reminders_enabled = TRUE AND is_blocked = FALSE
        """)
        await conn.close()
        return users
    except Exception as e:
        logger.error(f"Error getting users for reminders: {e}")
        return []

async def send_reminder_to_user(user_id: int, nickname: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ API
        result = await api_request("get_reminder_message", {"user_id": user_id})
        
        if result.get("status") == "ok":
            message_text = result.get("message")
            author_nickname = result.get("nickname")
            message_id = result.get("message_id")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_text = f"""üíù **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–µ–±—è!**

üí¨ _{message_text}_

üë§ –û—Ç: **{author_nickname}**

üåü _–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º!_"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=user_id,
                text=reminder_text,
                parse_mode='Markdown'
            )
            
            logger.info(f"‚úÖ Reminder sent to user {user_id} ({nickname}), message_id: {message_id}")
            return True
            
        elif result.get("status") == "no_messages":
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            motivational_messages = [
                "üíù **–¢–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞—Ä—è–¥ –ø–æ–∑–∏—Ç–∏–≤–∞!**\n\nüåü _–ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ!_",
                "üíù **–í—Ä–µ–º—è –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–∞!**\n\n‚ú® _–¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á–µ–π-—Ç–æ –¥–µ–Ω—å –∫ –ª—É—á—à–µ–º—É –ø—Ä–æ—Å—Ç—ã–º –¥–æ–±—Ä—ã–º —Å–ª–æ–≤–æ–º!_",
                "üíù **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞!**\n\nü§ó _–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ–±—Ä–æ—Ç–æ–π —Å –º–∏—Ä–æ–º!_",
                "üíù **–ó–∞—Ä—è–¥ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!**\n\nüí´ _–¢–≤–æ—è —É–ª—ã–±–∫–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ª—É—á—à–µ–π —á–∞—Å—Ç—å—é –¥–Ω—è –¥–ª—è –∫–æ–≥–æ-—Ç–æ!_"
            ]
            
            motivational_text = random.choice(motivational_messages)
            
            await bot.send_message(
                chat_id=user_id,
                text=motivational_text,
                parse_mode='Markdown'
            )
            
            logger.info(f"‚úÖ Motivational reminder sent to user {user_id} ({nickname})")
            return True
            
        else:
            logger.warning(f"Failed to get reminder message for user {user_id}")
            return False
            
    except TelegramForbiddenError:
        logger.warning(f"User {user_id} ({nickname}) blocked the bot")
        return False
    except TelegramBadRequest as e:
        logger.warning(f"Bad request sending to user {user_id} ({nickname}): {e}")
        return False
    except Exception as e:
        logger.error(f"Error sending reminder to user {user_id} ({nickname}): {e}")
        return False

async def send_daily_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    current_time = datetime.now().time()
    current_hour = current_time.hour
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if not (REMINDER_START_HOUR <= current_hour < REMINDER_END_HOUR):
        logger.info(f"Outside reminder hours ({current_hour}:00), skipping reminders")
        return
    
    logger.info(f"üîî Starting daily reminder broadcast at {current_time}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    users = await get_users_for_reminders()
    
    if not users:
        logger.info("No users found for reminders")
        return
    
    logger.info(f"Found {len(users)} users for reminders")
    
    success_count = 0
    failure_count = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å API
    for user in users:
        user_id = user['user_id']
        nickname = user['nickname']
        
        try:
            success = await send_reminder_to_user(user_id, nickname)
            if success:
                success_count += 1
            else:
                failure_count += 1
                
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(0.5)
            
        except Exception as e:
            logger.error(f"Error processing user {user_id}: {e}")
            failure_count += 1
    
    logger.info(f"üìä Reminder broadcast completed: {success_count} success, {failure_count} failures")

async def schedule_reminders():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    logger.info("üîî Reminder scheduler started")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    while True:
        try:
            current_time = datetime.now()
            current_hour = current_time.hour
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            if REMINDER_START_HOUR <= current_hour < REMINDER_END_HOUR:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ –≤ —ç—Ç–æ–º —á–∞—Å—É
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ (–ø–µ—Ä–≤—ã–µ 5 –º–∏–Ω—É—Ç)
                if current_time.minute < 5:
                    await send_daily_reminders()
                    # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞ —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    next_hour = current_time.replace(minute=0, second=0, microsecond=0)
                    next_hour = next_hour.replace(hour=current_hour + 1)
                    wait_seconds = (next_hour - current_time).total_seconds()
                    logger.info(f"Waiting {wait_seconds} seconds until next reminder check")
                    await asyncio.sleep(wait_seconds)
                else:
                    # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
                    next_hour = current_time.replace(minute=0, second=0, microsecond=0)
                    next_hour = next_hour.replace(hour=current_hour + 1)
                    wait_seconds = (next_hour - current_time).total_seconds()
                    await asyncio.sleep(wait_seconds)
            else:
                # –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –∂–¥–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
                if current_hour >= REMINDER_END_HOUR:
                    # –ü–æ—Å–ª–µ 20:00 - –∂–¥–µ–º –¥–æ 12:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                    next_start = current_time.replace(hour=REMINDER_START_HOUR, minute=0, second=0, microsecond=0)
                    next_start = next_start.replace(day=current_time.day + 1)
                else:
                    # –î–æ 12:00 - –∂–¥–µ–º –¥–æ 12:00 —Å–µ–≥–æ–¥–Ω—è
                    next_start = current_time.replace(hour=REMINDER_START_HOUR, minute=0, second=0, microsecond=0)
                
                wait_seconds = (next_start - current_time).total_seconds()
                logger.info(f"Outside working hours, waiting {wait_seconds} seconds until {next_start}")
                await asyncio.sleep(wait_seconds)
                
        except Exception as e:
            logger.error(f"Error in reminder scheduler: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            await asyncio.sleep(300)

async def test_reminders():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    logger.info("üß™ Testing reminder system...")
    await send_daily_reminders()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        await test_reminders()
    else:
        await schedule_reminders()

if __name__ == "__main__":
    asyncio.run(main())
