#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
"""

import os
import sys

def check_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω-–±–æ—Ç–∞"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª .env
    if not os.path.exists(".env"):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
    env_vars = {}
    try:
        with open(".env", "r") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#") and "=" in line:
                    key, value = line.split("=", 1)
                    env_vars[key.strip()] = value.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = ["ADMIN_BOT_TOKEN", "ADMIN_ID"]
    missing_vars = []
    
    for var in required_vars:
        if var not in env_vars or not env_vars[var]:
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for var in missing_vars:
            print(f"   ‚Ä¢ {var}")
        print("")
        print("üìã –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env:")
        if "ADMIN_BOT_TOKEN" in missing_vars:
            print("   ADMIN_BOT_TOKEN=–í–ê–®_–¢–û–ö–ï–ù_–ê–î–ú–ò–ù_–ë–û–¢–ê")
        if "ADMIN_ID" in missing_vars:
            print("   ADMIN_ID=–í–ê–®_TELEGRAM_ID")
        print("")
        print("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ADMIN_BOT_SETUP.md")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token = env_vars["ADMIN_BOT_TOKEN"]
    if len(token) < 20 or ":" not in token:
        print("‚ùå ADMIN_BOT_TOKEN –ø–æ—Ö–æ–∂–µ –Ω–µ–≤–µ—Ä–Ω—ã–π")
        print("   –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞: 1234567890:AABCDEFghijklmnop...")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID
    admin_id = env_vars["ADMIN_ID"]
    try:
        admin_id_int = int(admin_id)
        if admin_id_int <= 0:
            raise ValueError("Invalid ID")
    except ValueError:
        print("‚ùå ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0")
        print(f"   –°–µ–π—á–∞—Å: {admin_id}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ admin_bot.py
    if not os.path.exists("admin_bot.py"):
        print("‚ùå –§–∞–π–ª admin_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
    print("")
    print("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω: {token[:10]}...")
    print(f"   ‚Ä¢ –ê–¥–º–∏–Ω ID: {admin_id}")
    print(f"   ‚Ä¢ Backend: {env_vars.get('BACKEND_URL', 'http://localhost:8000')}")
    print("")
    print("üöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
    print("   ./deploy.sh restart       # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("   systemctl status positive-support-admin-bot  # –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω-–±–æ—Ç–∞")
    print("")
    return True

if __name__ == "__main__":
    if check_config():
        sys.exit(0)
    else:
        sys.exit(1)
