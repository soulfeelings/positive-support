import os
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Optional, List
import asyncpg
import logging
from achievements import AchievementSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = int(os.getenv("DB_PORT", "5432"))
DB_USER = os.getenv("DB_USER", "bot_user")
DB_PASSWORD = os.getenv("DB_PASSWORD", "8998")
DB_NAME = os.getenv("DB_NAME", "support_bot")

# –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logger.info(f"üìä Database config: {DB_HOST}:{DB_PORT}, DB: {DB_NAME}, User: {DB_USER}")

async def get_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    try:
        conn = await asyncpg.connect(
            host=DB_HOST, port=DB_PORT,
            user=DB_USER, password=DB_PASSWORD,
            database=DB_NAME
        )
        logger.info("üîó Database connection successful")
        return conn
    except Exception as e:
        logger.error(f"‚ùå Database connection failed: {e}")
        raise

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class SetNickname(BaseModel):
    user_id: int
    nickname: str

class UserProfile(BaseModel):
    user_id: int

class HelpRequestQuery(BaseModel):
    user_id: int
    last_seen_id: Optional[int] = 0

class ToggleReminders(BaseModel):
    user_id: int

class ReminderMessageQuery(BaseModel):
    user_id: int
    last_seen_id: Optional[int] = 0

class Message(BaseModel):
    user_id: int
    text: Optional[str] = None
    file_id: Optional[str] = None
    message_type: str = "text"  # "text", "voice" –∏–ª–∏ "video_note"

class ReminderSettings(BaseModel):
    user_id: int
    reminders_enabled: bool

class TopListQuery(BaseModel):
    user_id: int

class AchievementQuery(BaseModel):
    user_id: int

class CheckAchievementsQuery(BaseModel):
    user_id: int
    action: str
    data: Optional[dict] = {}

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def index():
    return {"status": "API —Ä–∞–±–æ—Ç–∞–µ—Ç"}

@app.post("/set_nickname")
async def set_nickname(data: SetNickname):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    logger.info(f"üîç API: Attempting to set nickname '{data.nickname}' for user {data.user_id}")
    
    try:
        conn = await get_connection()
        logger.info("üîó Database connection established")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–∏–∫–Ω–µ–π–º —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = await conn.fetchrow(
            "SELECT user_id FROM users WHERE nickname = $1", 
            data.nickname
        )
        logger.info(f"üîç Existing user check: {existing_user}")
        
        # –ï—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - –æ—à–∏–±–∫–∞
        if existing_user and existing_user['user_id'] != data.user_id:
            await conn.close()
            logger.warning(f"‚ùå Nickname '{data.nickname}' already taken by user {existing_user['user_id']}")
            return {"status": "error", "message": "Nickname already taken"}
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º (–∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)
        if existing_user and existing_user['user_id'] == data.user_id:
            await conn.close()
            logger.info(f"‚úÖ User already has this nickname: {data.user_id} -> {data.nickname}")
            return {"status": "success"}

        # –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"üíæ Creating/updating user {data.user_id} with nickname '{data.nickname}'")
        await conn.execute("""
            INSERT INTO users (user_id, nickname) VALUES ($1, $2)
            ON CONFLICT (user_id) DO UPDATE SET nickname = EXCLUDED.nickname
        """, data.user_id, data.nickname)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        saved_user = await conn.fetchrow("SELECT nickname FROM users WHERE user_id = $1", data.user_id)
        logger.info(f"üîç Verification check: {saved_user}")
        
        await conn.close()
        
        if saved_user and saved_user['nickname'] == data.nickname:
            logger.info(f"‚úÖ User saved successfully: {data.user_id} -> {data.nickname}")
            return {"status": "success"}
        else:
            logger.error(f"‚ùå Failed to save user: {data.user_id}, saved: {saved_user}")
            return {"status": "error", "message": "Failed to save nickname"}
            
    except Exception as e:
        logger.error(f"‚ùå Exception in set_nickname: {type(e).__name__}: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return {"status": "error", "message": f"Database error: {str(e)}"}

@app.post("/profile")
async def get_profile(data: UserProfile):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        conn = await get_connection()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü reminders_enabled
        column_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'users' AND column_name = 'reminders_enabled'
            )
        """)
        
        if column_exists:
            user = await conn.fetchrow(
                "SELECT user_id, nickname, is_blocked, reminders_enabled FROM users WHERE user_id = $1", 
                data.user_id
            )
        else:
            user = await conn.fetchrow(
                "SELECT user_id, nickname, is_blocked FROM users WHERE user_id = $1", 
                data.user_id
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ratings
        try:
            rating_row = await conn.fetchrow(
                "SELECT rating FROM ratings WHERE user_id = $1", 
                data.user_id
            )
            rating = rating_row["rating"] if rating_row else 0
        except:
            rating = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        complaints_count = await conn.fetchval(
            "SELECT COUNT(*) FROM complaints WHERE original_user_id = $1", 
            data.user_id
        ) or 0
        
        await conn.close()
        
        if user:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ reminders_enabled
            if column_exists and "reminders_enabled" in user:
                reminders_enabled = user["reminders_enabled"] if user["reminders_enabled"] is not None else True
            else:
                reminders_enabled = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω—ã
            
            return {
                "status": "ok",
                "user_id": user["user_id"],
                "nickname": user["nickname"],
                "rating": rating,
                "complaints_count": complaints_count,
                "is_blocked": user["is_blocked"],
                "reminders_enabled": reminders_enabled
            }
        else:
            return {"status": "not_found"}
    except Exception as e:
        logger.error(f"Error in get_profile: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return {"status": "error"}

@app.post("/send_support")
async def send_support(data: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    try:
        conn = await get_connection()
        result = await conn.execute(
            "INSERT INTO messages (user_id, text, file_id, message_type, type) VALUES ($1, $2, $3, $4, 'support')",
            data.user_id, data.text, data.file_id, data.message_type
        )
        await conn.close()
        logger.info(f"‚úÖ Support message saved: user_id={data.user_id}, type={data.message_type}")
        return {"status": "success"}
    except Exception as e:
        logger.error(f"Error: {e}")
        return {"status": "error"}

@app.post("/send_request")
async def send_request(data: Message):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏"""
    try:
        conn = await get_connection()
        result = await conn.execute(
            "INSERT INTO messages (user_id, text, file_id, message_type, type) VALUES ($1, $2, $3, $4, 'request')",
            data.user_id, data.text, data.file_id, data.message_type
        )
        await conn.close()
        logger.info(f"‚úÖ Help request saved: user_id={data.user_id}, type={data.message_type}")
        return {"status": "success"}
    except Exception as e:
        logger.error(f"Error: {e}")
        return {"status": "error"}

@app.post("/get_support")
async def get_support(data: UserProfile):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    try:
        conn = await get_connection()
        message = await conn.fetchrow("""
            SELECT m.text, u.nickname 
            FROM messages m
            JOIN users u ON m.user_id = u.user_id
            WHERE m.type = 'support' AND m.user_id != $1
            ORDER BY RANDOM() LIMIT 1
        """, data.user_id)
        await conn.close()
        
        if message:
            return {
                "status": "text",
                "message": message["text"],
                "nickname": message["nickname"]
            }
        else:
            return {"status": "no_messages"}
    except Exception as e:
        logger.error(f"Error: {e}")
        return {"status": "error"}

@app.post("/get_help_request")
async def get_help_request(data: HelpRequestQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É (FIFO)"""
    try:
        conn = await get_connection()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å id > last_seen_id
        request = await conn.fetchrow("""
            SELECT m.id, m.text, m.file_id, m.message_type, u.nickname, m.user_id 
            FROM messages m
            JOIN users u ON m.user_id = u.user_id
            WHERE m.type = 'request' AND m.user_id != $1 AND m.id > $2
            ORDER BY m.id ASC LIMIT 1
        """, data.user_id, data.last_seen_id)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å id > last_seen_id, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        if not request:
            request = await conn.fetchrow("""
                SELECT m.id, m.text, m.file_id, m.message_type, u.nickname, m.user_id 
                FROM messages m
                JOIN users u ON m.user_id = u.user_id
                WHERE m.type = 'request' AND m.user_id != $1
                ORDER BY m.id ASC LIMIT 1
            """, data.user_id)
            
            if request:
                logger.info(f"No more messages after id {data.last_seen_id}, starting from beginning for user {data.user_id}")
        
        await conn.close()
        
        if request:
            logger.info(f"Showing help request id={request['id']} to user {data.user_id}, last_seen_id was {data.last_seen_id}")
            return {
                "status": "ok",
                "request": {
                    "id": request["id"],
                    "text": request["text"],
                    "file_id": request["file_id"],
                    "message_type": request["message_type"],
                    "nickname": request["nickname"],
                    "user_id": request["user_id"]
                }
            }
        else:
            return {"status": "no_requests"}
    except Exception as e:
        logger.error(f"Error: {e}")
        return {"status": "error"}

@app.post("/delete_help_request")
async def delete_help_request(data: dict):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞"""
    try:
        request_id = data.get("request_id")
        user_id = data.get("user_id")  # ID –∞–≤—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
        
        conn = await get_connection()
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏
        result = await conn.execute(
            "DELETE FROM messages WHERE id = $1 AND user_id = $2 AND type = 'request'",
            request_id, user_id
        )
        await conn.close()
        
        logger.info(f"‚úÖ Help request deleted: id={request_id}, user_id={user_id}")
        return {"status": "success"}
        
    except Exception as e:
        logger.error(f"Error deleting help request: {e}")
        return {"status": "error"}

@app.post("/submit_complaint")
async def submit_complaint(data: dict):
    """–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        request_id = data.get("request_id")
        complainer_user_id = data.get("complainer_user_id")
        
        conn = await get_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∂–∞–ª—É—é—Ç—Å—è
        message_data = await conn.fetchrow("""
            SELECT id, user_id, text, file_id, message_type, created_at
            FROM messages 
            WHERE id = $1 AND type = 'request'
        """, request_id)
        
        if not message_data:
            await conn.close()
            return {"status": "message_not_found"}
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –∂–∞–ª–æ–±
        await conn.execute("""
            INSERT INTO complaints (message_id, original_user_id, complainer_user_id, text, file_id, message_type, created_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
        """, 
            message_data["id"], 
            message_data["user_id"], 
            complainer_user_id,
            message_data["text"], 
            message_data["file_id"], 
            message_data["message_type"], 
            message_data["created_at"]
        )
        
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã messages
        await conn.execute("DELETE FROM messages WHERE id = $1", request_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        original_user_id = message_data["user_id"]
        complaints_count = await conn.fetchval(
            "SELECT COUNT(*) FROM complaints WHERE original_user_id = $1", 
            original_user_id
        ) or 0
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ 5 –∏–ª–∏ –±–æ–ª–µ–µ –∂–∞–ª–æ–±–∞—Ö
        auto_blocked = False
        if complaints_count >= 5:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_already_blocked = await conn.fetchval(
                "SELECT is_blocked FROM users WHERE user_id = $1", 
                original_user_id
            )
            
            if not is_already_blocked:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await conn.execute(
                    "UPDATE users SET is_blocked = TRUE WHERE user_id = $1", 
                    original_user_id
                )
                auto_blocked = True
                logger.warning(f"üö´ AUTO-BLOCKED user {original_user_id} after {complaints_count} complaints")
        
        await conn.close()
        
        logger.info(f"‚úÖ Complaint submitted: message_id={request_id}, by_user={complainer_user_id}, complaints_total={complaints_count}")
        
        result = {"status": "success", "complaints_count": complaints_count}
        if auto_blocked:
            result["auto_blocked"] = True
            result["message"] = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ {complaints_count} –∂–∞–ª–æ–±"
        
        return result
        
    except Exception as e:
        logger.error(f"Error submitting complaint: {e}")
        return {"status": "error"}

@app.post("/increment_rating")
async def increment_rating(data: UserProfile):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ +1"""
    try:
        conn = await get_connection()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ 1, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        await conn.execute("""
            INSERT INTO ratings (user_id, rating) VALUES ($1, 1)
            ON CONFLICT (user_id) DO UPDATE SET rating = ratings.rating + 1
        """, data.user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        new_rating = await conn.fetchval(
            "SELECT rating FROM ratings WHERE user_id = $1", 
            data.user_id
        )
        
        await conn.close()
        
        logger.info(f"‚úÖ Rating incremented for user {data.user_id}, new rating: {new_rating}")
        return {"status": "success", "new_rating": new_rating}
        
    except Exception as e:
        logger.error(f"Error incrementing rating: {e}")
        return {"status": "error"}

@app.post("/toggle_reminders")
async def toggle_reminders(data: ToggleReminders):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        conn = await get_connection()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü reminders_enabled
        column_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'users' AND column_name = 'reminders_enabled'
            )
        """)
        
        if not column_exists:
            # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            await conn.execute("ALTER TABLE users ADD COLUMN reminders_enabled BOOLEAN DEFAULT TRUE")
            logger.info(f"Added reminders_enabled column to users table")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        current_state = await conn.fetchval(
            "SELECT reminders_enabled FROM users WHERE user_id = $1", 
            data.user_id
        )
        
        if current_state is None:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            user_exists = await conn.fetchval("SELECT EXISTS(SELECT 1 FROM users WHERE user_id = $1)", data.user_id)
            if not user_exists:
                await conn.close()
                return {"status": "error", "message": "User not found"}
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ reminders_enabled NULL - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TRUE
                current_state = True
                await conn.execute(
                    "UPDATE users SET reminders_enabled = TRUE WHERE user_id = $1",
                    data.user_id
                )
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        new_state = not current_state
        await conn.execute(
            "UPDATE users SET reminders_enabled = $1 WHERE user_id = $2",
            new_state, data.user_id
        )
        
        await conn.close()
        
        logger.info(f"‚úÖ Reminders toggled for user {data.user_id}: {current_state} -> {new_state}")
        return {"status": "success", "reminders_enabled": new_state}
        
    except Exception as e:
        logger.error(f"Error toggling reminders: {e}")
        return {"status": "error"}

@app.post("/get_reminder_message")
async def get_reminder_message(data: ReminderMessageQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ get_help_request)"""
    try:
        conn = await get_connection()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å id > last_seen_id
        message = await conn.fetchrow("""
            SELECT m.id, m.text, m.file_id, m.message_type, u.nickname, m.user_id 
            FROM messages m
            JOIN users u ON m.user_id = u.user_id
            WHERE m.type = 'support' AND m.user_id != $1 AND m.id > $2
            ORDER BY m.id ASC LIMIT 1
        """, data.user_id, data.last_seen_id)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å id > last_seen_id, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        if not message:
            message = await conn.fetchrow("""
                SELECT m.id, m.text, m.file_id, m.message_type, u.nickname, m.user_id 
                FROM messages m
                JOIN users u ON m.user_id = u.user_id
                WHERE m.type = 'support' AND m.user_id != $1
                ORDER BY m.id ASC LIMIT 1
            """, data.user_id)
            
            if message:
                logger.info(f"No more support messages after id {data.last_seen_id}, starting from beginning for user {data.user_id}")
        
        await conn.close()
        
        if message:
            logger.info(f"Reminder message found for user {data.user_id}: message_id={message['id']}")
            return {
                "status": "ok",
                "message": {
                    "id": message["id"],
                    "text": message["text"],
                    "file_id": message["file_id"],
                    "message_type": message["message_type"],
                    "nickname": message["nickname"],
                    "user_id": message["user_id"]
                }
            }
        else:
            return {"status": "no_messages"}
    except Exception as e:
        logger.error(f"Error getting reminder message: {e}")
        return {"status": "error"}

@app.get("/get_users_with_reminders")
async def get_users_with_reminders():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    try:
        conn = await get_connection()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü reminders_enabled
        column_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'users' AND column_name = 'reminders_enabled'
            )
        """)
        
        if column_exists:
            users = await conn.fetch("""
                SELECT user_id FROM users 
                WHERE (reminders_enabled = TRUE OR reminders_enabled IS NULL) AND is_blocked = FALSE
            """)
        else:
            # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
            users = await conn.fetch("""
                SELECT user_id FROM users 
                WHERE is_blocked = FALSE
            """)
        
        await conn.close()
        
        user_ids = [user["user_id"] for user in users]
        logger.info(f"Found {len(user_ids)} users with enabled reminders")
        
        return {"status": "ok", "user_ids": user_ids}
    except Exception as e:
        logger.error(f"Error getting users with reminders: {e}")
        return {"status": "error"}

@app.post("/toplist")
async def get_toplist(data: TopListQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
    try:
        conn = await get_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        top_users = await conn.fetch("""
            SELECT u.nickname, r.rating, u.user_id
            FROM ratings r
            JOIN users u ON r.user_id = u.user_id
            WHERE u.is_blocked = FALSE
            ORDER BY r.rating DESC
            LIMIT 10
        """)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        user_position = await conn.fetchval("""
            SELECT COUNT(*) + 1
            FROM ratings r
            JOIN users u ON r.user_id = u.user_id
            WHERE u.is_blocked = FALSE AND r.rating > (
                SELECT COALESCE(r2.rating, 0)
                FROM ratings r2
                WHERE r2.user_id = $1
            )
        """, data.user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_rating = await conn.fetchval("""
            SELECT COALESCE(rating, 0) FROM ratings WHERE user_id = $1
        """, data.user_id)
        
        await conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-10
        toplist = []
        for i, user in enumerate(top_users, 1):
            toplist.append({
                "position": i,
                "nickname": user["nickname"],
                "rating": user["rating"],
                "user_id": user["user_id"]
            })
        
        return {
            "status": "ok",
            "toplist": toplist,
            "user_position": user_position,
            "user_rating": user_rating
        }
        
    except Exception as e:
        logger.error(f"Error getting toplist: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        conn = await get_connection()
        await conn.fetchval("SELECT 1")
        await conn.close()
        return {"status": "healthy"}
    except Exception as e:
        return JSONResponse({"status": "unhealthy"}, status_code=503)

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
@app.post("/check_achievements")
async def check_achievements(data: CheckAchievementsQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        conn = await get_connection()
        achievement_system = AchievementSystem(conn)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = await achievement_system.check_achievements(
            data.user_id, 
            data.action, 
            **data.data
        )
        
        await conn.close()
        
        return {
            "status": "success",
            "new_achievements": new_achievements,
            "count": len(new_achievements)
        }
        
    except Exception as e:
        logger.error(f"Error checking achievements: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/get_user_achievements")
async def get_user_achievements(data: AchievementQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = await get_connection()
        achievement_system = AchievementSystem(conn)
        
        achievements = await achievement_system.get_user_achievements(data.user_id)
        stats = await achievement_system.get_achievement_stats(data.user_id)
        
        await conn.close()
        
        return {
            "status": "success",
            "achievements": achievements,
            "stats": stats
        }
        
    except Exception as e:
        logger.error(f"Error getting user achievements: {e}")
        return {"status": "error", "message": str(e)}


@app.post("/get_recent_achievements")
async def get_recent_achievements(data: AchievementQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = await get_connection()
        achievement_system = AchievementSystem(conn)
        
        recent_achievements = await achievement_system.get_recent_achievements(data.user_id, limit=5)
        
        await conn.close()
        
        return {
            "status": "success",
            "recent_achievements": recent_achievements
        }
        
    except Exception as e:
        logger.error(f"Error getting recent achievements: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/get_all_achievements")
async def get_all_achievements():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        from achievements_config import get_all_achievements
        achievements = get_all_achievements()
        
        return {
            "status": "success",
            "achievements": achievements
        }
        
    except Exception as e:
        logger.error(f"Error getting all achievements: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/check_achievements_dynamic")
async def check_achievements_dynamic(data: CheckAchievementsQuery):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
    try:
        conn = await get_connection()
        achievement_system = AchievementSystem(conn)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        earned_achievements = await achievement_system.check_achievements_dynamic(
            data.user_id, 
            **data.data
        )
        
        await conn.close()
        
        return {
            "status": "success",
            "achievements": earned_achievements,
            "count": len(earned_achievements)
        }
        
    except Exception as e:
        logger.error(f"Error checking dynamic achievements: {e}")
        return {"status": "error", "message": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)