version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: positive_support_db
    environment:
      POSTGRES_DB: support_bot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 8998
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - support_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d support_bot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  api:
    build: .
    container_name: positive_support_api
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=8998
      - DB_NAME=support_bot
      - BACKEND_URL=http://api:8000
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - support_network
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./logs:/app/logs

  # Telegram Bot
  bot:
    build: .
    container_name: positive_support_bot
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - BACKEND_URL=http://api:8000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=8998
      - DB_NAME=support_bot
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - api
    networks:
      - support_network
    restart: unless-stopped
    command: python bot.py
    volumes:
      - ./logs:/app/logs

  # Reminder Scheduler
  reminders:
    build: .
    container_name: positive_support_reminders
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - API_BASE_URL=http://api:8000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=8998
      - DB_NAME=support_bot
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - api
    networks:
      - support_network
    restart: unless-stopped
    command: python reminder_scheduler.py
    volumes:
      - ./logs:/app/logs

volumes:
  postgres_data:
    driver: local

networks:
  support_network:
    driver: bridge
