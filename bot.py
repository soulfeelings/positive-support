import os
import asyncio
import logging
import aiohttp
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from message_filter import get_message_filter, FilterResult


load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL")

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not set!")
    exit(1)

if not BACKEND_URL:
    logger.error("BACKEND_URL not set!")
    exit(1)

logger.info(f"ü§ñ Bot starting with token: {BOT_TOKEN[:10]}...")
logger.info(f"üåê Backend URL: {BACKEND_URL}")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
message_filter = get_message_filter()

class UserStates(StatesGroup):
    waiting_nickname = State()
    waiting_message = State()
    viewing_help_request = State()
    changing_nickname = State()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É"), KeyboardButton(text="üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")],
    [KeyboardButton(text="üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å"), KeyboardButton(text="ü§ù –ü–æ–º–æ—á—å –∫–æ–º—É-–Ω–∏–±—É–¥—å")],
    [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèÜ –¢–æ–ø–ª–∏—Å—Ç")]
], resize_keyboard=True)

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ—â–∏
def get_help_inline_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è –ü–æ–º–æ—á—å", callback_data="help_respond"),
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="help_next")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="help_menu"),
            InlineKeyboardButton(text="‚ùå –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="help_complaint")
        ]
    ])

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
def get_profile_inline_kb():
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data="change_nickname")]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)



def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    if not text:
        return text
    return text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')

async def check_user_blocked(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        profile = await api_request("profile", {"user_id": user_id})
        return profile.get("status") == "ok" and profile.get("is_blocked", False)
    except Exception as e:
        logger.error(f"Error checking user block status: {e}")
        return False

async def send_blocked_message(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
    blocked_text = """üö´ **–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

üìû **–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏**

‚ÑπÔ∏è _–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å:_
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∂–∞–ª–æ–±–∞–º–∏ –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ù–µ–ø–æ–¥–æ–±–∞—é—â–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º"""
    
    await message.answer(blocked_text, parse_mode='Markdown')

async def handle_filter_violation(message: types.Message, filter_result: FilterResult):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    logger.info(f"üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {filter_result.reason}")
    
    # –ü—Ä–æ—Å—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
    block_text = f"""üö´ **–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ**

{filter_result.details}

üìù **–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:**
‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –∏ —Ä–µ–∫–ª–∞–º–∞
‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º

üí° _–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ_"""
    
    await message.answer(block_text, parse_mode='Markdown')
    logger.warning(f"User {user_id} message blocked for {filter_result.reason}: {filter_result.details}")

async def send_blocked_callback(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–ª—è callback"""
    blocked_text = """üö´ **–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

üìû **–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏**"""
    
    await callback.message.answer(blocked_text, parse_mode='Markdown')
    await callback.answer()

async def api_request(endpoint: str, data: dict):
    """–ü—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{BACKEND_URL}/{endpoint}", json=data) as response:
                if response.status != 200:
                    logger.error(f"API returned status {response.status} for {endpoint}")
                    return {"status": "error", "message": f"HTTP {response.status}"}
                result = await response.json()
                logger.info(f"API {endpoint} response: {result}")
                return result
    except Exception as e:
        logger.error(f"API error for {endpoint}: {e}")
        return {"status": "error", "message": str(e)}

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç"""
    await state.clear()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile = await api_request("profile", {"user_id": user_id})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_user_blocked(user_id):
        await send_blocked_message(message)
        return
    
    if profile.get("status") == "ok" and profile.get("nickname"):
        nickname = profile.get('nickname')
        welcome_text = f"""üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, {escape_markdown(nickname)}!**

ü§ù **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:**
‚Ä¢ üíå –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º
‚Ä¢ üî• –ü–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞  
‚Ä¢ üÜò –ü—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
‚Ä¢ ü§ù –ü–æ–º–æ–≥–∞—Ç—å —Ç–µ–º, –∫–æ–º—É –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ ‚≠ê –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º

üíù **–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å:**
‚Ä¢ –î–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ

üåü –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"""

        await message.answer(
            welcome_text,
            reply_markup=main_kb,
            parse_mode='Markdown'
        )
    else:
        welcome_text = """üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏!**

ü§ù **–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:**
‚Ä¢ üíå –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ üÜò –ü—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ –∫–æ–≥–¥–∞ —Ç—è–∂–µ–ª–æ
‚Ä¢ ü§ù –ü–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º
‚Ä¢ ‚≠ê –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞

üíù **–≠—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ:**
‚Ä¢ –¢–µ–±—è –ø–æ–π–º—É—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç
‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ–º–æ—á—å —Ç–µ–º, –∫–æ–º—É —Ç—Ä—É–¥–Ω–æ
‚Ä¢ –¶–∞—Ä–∏—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –¥–æ–±—Ä–∞ –∏ –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏

üéØ **–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (3-20 —Å–∏–º–≤–æ–ª–æ–≤):**"""

        await message.answer(welcome_text, parse_mode='Markdown')
        await state.set_state(UserStates.waiting_nickname)

@dp.message(UserStates.waiting_nickname)
async def handle_nickname(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        await state.clear()
        return
    
    nickname = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∫–Ω–µ–π–º —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä
    filter_result = message_filter.check_message(message.from_user.id, nickname, "text")
    if filter_result.is_blocked:
        await handle_filter_violation(message, filter_result)
        return

    if len(nickname) < 3 or len(nickname) > 20:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3-20 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    logger.info(f"Attempting to set nickname '{nickname}' for user {message.from_user.id}")
    
    result = await api_request("set_nickname", {
        "user_id": message.from_user.id,
        "nickname": nickname
    })
    
    logger.info(f"Set nickname result: {result}")
    
    if result.get("status") == "success":
        await message.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º {nickname} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_kb)
        await state.clear()
        logger.info(f"‚úÖ Nickname '{nickname}' successfully set for user {message.from_user.id}")
    else:
        error_msg = result.get("message", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        logger.warning(f"‚ùå Failed to set nickname '{nickname}' for user {message.from_user.id}: {error_msg}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º:")

@dp.message(UserStates.changing_nickname)
async def handle_nickname_change(message: types.Message, state: FSMContext):
    """–°–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        await state.clear()
        return
    
    nickname = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∫–Ω–µ–π–º —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä
    filter_result = message_filter.check_message(message.from_user.id, nickname, "text")
    if filter_result.is_blocked:
        await handle_filter_violation(message, filter_result)
        return

    if len(nickname) < 3 or len(nickname) > 20:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3-20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return

    logger.info(f"Attempting to change nickname to '{nickname}' for user {message.from_user.id}")
    
    result = await api_request("set_nickname", {
        "user_id": message.from_user.id,
        "nickname": nickname
    })
    
    logger.info(f"Change nickname result: {result}")
    
    if result.get("status") == "success":
        await message.answer(
            f"‚úÖ –ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **{escape_markdown(nickname)}**!",
            reply_markup=main_kb,
            parse_mode='Markdown'
        )
        await state.clear()
        logger.info(f"‚úÖ Nickname successfully changed to '{nickname}' for user {message.from_user.id}")
    else:
        error_msg = result.get("message", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        logger.warning(f"‚ùå Failed to change nickname to '{nickname}' for user {message.from_user.id}: {error_msg}")
        if "already taken" in error_msg.lower() or "–∑–∞–Ω—è—Ç" in error_msg.lower():
            await message.answer(f"‚ùå –ù–∏–∫–Ω–µ–π–º **{escape_markdown(nickname)}** —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π:", parse_mode='Markdown')
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º:")

async def send_support(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        return
    
    await state.clear()
    await message.answer("üíù –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
    await state.set_state(UserStates.waiting_message)
    await state.update_data(action="support")

async def need_help(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        return
    
    await state.clear()
    await message.answer(
        "üí≠ –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?\n\n"
        "üìù –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º, –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫"
    )
    await state.set_state(UserStates.waiting_message)
    await state.update_data(action="help")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (—Ä–∞–±–æ—Ç–∞—é—Ç –¥–∞–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_message)
@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ—Ñ–∏–ª—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_profile(message, state)

@dp.message(F.text == "üèÜ –¢–æ–ø–ª–∏—Å—Ç")
async def handle_toplist_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¢–æ–ø–ª–∏—Å—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_toplist(message, state)

@dp.message(F.text == "üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def handle_send_support_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await send_support(message, state)

@dp.message(F.text == "üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def handle_get_support_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await get_support(message, state)

@dp.message(F.text == "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å")
async def handle_need_help_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await need_help(message, state)

@dp.message(F.text == "ü§ù –ü–æ–º–æ—á—å –∫–æ–º—É-–Ω–∏–±—É–¥—å")
async def handle_help_someone_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—á—å –∫–æ–º—É-–Ω–∏–±—É–¥—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await help_someone(message, state)

@dp.message(UserStates.waiting_message)
async def handle_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö, –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ –∫—Ä—É–∂–∫–æ–≤"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        await state.clear()
        return
    
    data = await state.get_data()
    action = data.get("action")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ
    if message.voice:
        message_data = {
            "user_id": message.from_user.id,
            "text": None,
            "file_id": message.voice.file_id,
            "message_type": "voice"
        }
        content_description = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif message.video_note:
        message_data = {
            "user_id": message.from_user.id,
            "text": None,
            "file_id": message.video_note.file_id,
            "message_type": "video_note"
        }
        content_description = "–≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫"
    elif message.text:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä
        filter_result = message_filter.check_message(message.from_user.id, message.text, "text")
        if filter_result.is_blocked:
            await handle_filter_violation(message, filter_result)
            return
            
        message_data = {
            "user_id": message.from_user.id,
            "text": message.text,
            "file_id": None,
            "message_type": "text"
        }
        content_description = "—Å–æ–æ–±—â–µ–Ω–∏–µ"
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫", reply_markup=main_kb)
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action == "support":
        help_recipient = data.get("help_recipient")
        
        if help_recipient:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É
            result = await api_request("send_support", message_data)
            logger.info(f"Send support API result: {result}")
            if result.get("status") == "success":
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Markdown
                safe_recipient_nickname = escape_markdown(help_recipient['nickname'])
                await message.answer(
                    f"‚úÖ {content_description.capitalize()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **{safe_recipient_nickname}**!\n\n"
                    f"üíù –¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.",
                    reply_markup=main_kb,
                    parse_mode='Markdown'
                )
        
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                try:
                    if message_data["message_type"] == "voice":
                        await bot.send_voice(
                            chat_id=help_recipient["user_id"],
                            voice=message_data["file_id"],
                            caption="üíù –î–ª—è —Ç–µ–±—è –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\nü§ó –ö—Ç–æ-—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å."
                        )
                    elif message_data["message_type"] == "video_note":
                        await bot.send_video_note(
                            chat_id=help_recipient["user_id"],
                            video_note=message_data["file_id"]
                        )
                        await bot.send_message(
                            chat_id=help_recipient["user_id"],
                            text="üíù –î–ª—è —Ç–µ–±—è –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\nü§ó –ö—Ç–æ-—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å."
                        )
                    else:
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Markdown
                        safe_message_text = escape_markdown(message_data['text'])
                        await bot.send_message(
                            chat_id=help_recipient["user_id"],
                            text=f"üíù –î–ª—è —Ç–µ–±—è –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
                                 f"üí¨ _{safe_message_text}_\n\n"
                                 f"ü§ó –ö—Ç–æ-—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ù–∞–¥–µ–µ–º—Å—è, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç!",
                            parse_mode='Markdown'
                        )
                    logger.info(f"Help response delivered from {message.from_user.id} to {help_recipient['user_id']}")
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ–º–æ—â—å
                    rating_result = await api_request("increment_rating", {"user_id": message.from_user.id})
                    if rating_result.get("status") == "success":
                        new_rating = rating_result.get("new_rating", 0)
                        logger.info(f"Rating incremented for user {message.from_user.id}, new rating: {new_rating}")
                    else:
                        logger.warning(f"Failed to increment rating for user {message.from_user.id}")
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    delete_result = await api_request("delete_help_request", {
                        "request_id": help_recipient["id"],
                        "user_id": help_recipient["user_id"]
                    })
                    if delete_result.get("status") == "success":
                        logger.info(f"Help request {help_recipient['id']} deleted after response")
                    else:
                        logger.warning(f"Failed to delete help request {help_recipient['id']}")
                        
                except Exception as e:
                    logger.error(f"Failed to deliver help response: {e}")
                    await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=main_kb)
        else:
            # –û–±—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –æ–±—â–∏–π –ø—É–ª
            result = await api_request("send_support", message_data)
            if result.get("status") == "success":
                await message.answer(f"‚úÖ {content_description.capitalize()} –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_kb)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=main_kb)
    
    elif action == "help":
        result = await api_request("send_request", message_data)
        logger.info(f"Send request API result: {result}")
        if result.get("status") == "success":
            await message.answer(
                f"‚úÖ –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ –ø–æ–º–æ—â–∏ ({content_description}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                "ü§ó –ö—Ç–æ-—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è –∏ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ.", 
                reply_markup=main_kb
            )
            logger.info(f"Help request sent: user_id={message.from_user.id}, type={message_data['message_type']}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=main_kb)
    
    await state.clear()

async def get_support(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        return
    
    await state.clear()
    result = await api_request("get_support", {"user_id": message.from_user.id})
    
    if result.get("status") == "text":
        await message.answer(f"üí¨ {result['message']}\n\nüë§ –û—Ç: {result['nickname']}")
    else:
        await message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

async def help_someone(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ (–Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞)"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        return
    
    await state.clear()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_seen_id –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(last_seen_help_id=0)
    await show_help_request_simple(message, state)

async def show_help_request_simple(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É (FIFO)"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π message_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    last_seen_id = data.get("last_seen_help_id", 0)
    
    logger.info(f"Requesting help request for user {message.from_user.id} with last_seen_id={last_seen_id}")
    result = await api_request("get_help_request", {
        "user_id": message.from_user.id,
        "last_seen_id": last_seen_id
    })
    
    if result.get("status") == "ok":
        request_data = result["request"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º last_seen_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        logger.info(f"Showing help request id={request_data['id']} to user {message.from_user.id}, updating last_seen_help_id")
        await state.update_data(
            current_request=request_data,
            last_seen_help_id=request_data["id"]
        )
        await state.set_state(UserStates.viewing_help_request)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if request_data["message_type"] == "voice":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Markdown
                safe_request_nickname = escape_markdown(request_data['nickname'])
                await bot.send_voice(
                    chat_id=message.chat.id,
                    voice=request_data["file_id"],
                    caption=f"üÜò **{safe_request_nickname}** –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏:\n\n‚ù§Ô∏è –•–æ—á–µ—à—å –ø–æ–º–æ—á—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?",
                    parse_mode='Markdown',
                    reply_markup=get_help_inline_kb()
                )
            except Exception as e:
                logger.error(f"Failed to send voice: {e}")
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Markdown
                safe_request_nickname = escape_markdown(request_data['nickname'])
                await message.answer(
                    f"üÜò **{safe_request_nickname}** –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏:\n\n"
                    f"üé§ _–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏)_\n\n"
                    f"‚ù§Ô∏è –•–æ—á–µ—à—å –ø–æ–º–æ—á—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?",
                    reply_markup=get_help_inline_kb(),
                    parse_mode='Markdown'
                )
        elif request_data["message_type"] == "video_note":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫
            try:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Markdown
                safe_request_nickname = escape_markdown(request_data['nickname'])
                await bot.send_video_note(
                    chat_id=message.chat.id,
                    video_note=request_data["file_id"]
                )
                await message.answer(
                    f"üÜò **{safe_request_nickname}** –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏:\n\n‚ù§Ô∏è –•–æ—á–µ—à—å –ø–æ–º–æ—á—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?",
                    reply_markup=get_help_inline_kb(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Failed to send video note: {e}")
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Markdown
                safe_request_nickname = escape_markdown(request_data['nickname'])
                await message.answer(
                    f"üÜò **{safe_request_nickname}** –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏:\n\n"
                    f"üé• _–í–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫ (–Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏)_\n\n"
                    f"‚ù§Ô∏è –•–æ—á–µ—à—å –ø–æ–º–æ—á—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?",
                    reply_markup=get_help_inline_kb(),
                    parse_mode='Markdown'
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –∏ —Ç–µ–∫—Å—Ç –¥–ª—è Markdown
            safe_request_nickname = escape_markdown(request_data['nickname'])
            safe_request_text = escape_markdown(request_data['text'])
            await message.answer(
                f"üÜò **{safe_request_nickname}** –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏:\n\n"
                f"üí≠ _{safe_request_text}_\n\n"
                "‚ù§Ô∏è –•–æ—á–µ—à—å –ø–æ–º–æ—á—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?",
                reply_markup=get_help_inline_kb(),
                parse_mode='Markdown'
            )
    else:
        await message.answer(
            "üòá –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏!\n\n"
            "‚ú® –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∑–∂–µ.",
            reply_markup=main_kb
        )

async def show_profile(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await state.clear()
    
    user_id = message.from_user.id
    logger.info(f"Showing profile for user {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = await api_request("profile", {"user_id": user_id})
    
    if profile.get("status") == "ok":
        nickname = profile.get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        rating = profile.get("rating", 0)
        complaints_count = profile.get("complaints_count", 0)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∏–∫–Ω–µ–π–º–µ –¥–ª—è Markdown
        safe_nickname = escape_markdown(nickname)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–≥—É –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        if rating < 20:
            league = "_–Ω–µ—Ç –ª–∏–≥–∏_"
        elif rating < 50:
            league = "ü•â **–ë—Ä–æ–Ω–∑–æ–≤–∞—è –ª–∏–≥–∞**"
        elif rating < 100:
            league = "ü•à **–°–µ—Ä–µ–±—Ä—è–Ω–∞—è –ª–∏–≥–∞**"
        else:
            league = "ü•á **–ó–æ–ª–æ—Ç–∞—è –ª–∏–≥–∞**"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∂–∞–ª–æ–±
        if complaints_count == 0:
            status_icon = "‚úÖ"
            status_text = "_–æ—Ç–ª–∏—á–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è_"
        elif complaints_count <= 2:
            status_icon = "‚ö†Ô∏è"
            status_text = "_–≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É_"
        elif complaints_count <= 5:
            status_icon = "üî¥"
            status_text = "_–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã_"
        else:
            status_icon = "üö´"
            status_text = "_–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è_"
        
        profile_text = f"""üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**

üìõ –ù–∏–∫–Ω–µ–π–º: **{safe_nickname}**
‚≠ê –†–µ–π—Ç–∏–Ω–≥: **{rating}**
üèÜ –õ–∏–≥–∞: {league}
üìä –°—Ç–∞—Ç—É—Å: {status_icon} {status_text}

üíå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: _–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ_
ü§ù –ü–æ–º–æ–≥–ª–∏ –ª—é–¥—è–º: **{rating}**
üö® –ñ–∞–ª–æ–±—ã –Ω–∞ –≤–∞—Å: **{complaints_count}**"""
        
        await message.answer(
            profile_text,
            parse_mode='Markdown',
            reply_markup=get_profile_inline_kb()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start",
            reply_markup=main_kb
        )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        return
    
    await message.answer(
        "üÜò **–°–ø—Ä–∞–≤–∫–∞:**\n\n"
        "üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É - –ø–æ–º–æ—á—å –∫–æ–º—É-—Ç–æ\n"
        "üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É - –ø–æ–ª—É—á–∏—Ç—å –¥–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞\n"
        "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "ü§ù –ü–æ–º–æ—á—å –∫–æ–º—É-–Ω–∏–±—É–¥—å - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —á–µ–π-—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏\n"
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º\n\n"
        "üõ°Ô∏è **–ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä:**\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞:\n"
        "‚Ä¢ –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)\n"
        "‚Ä¢ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∏ –∏ —Ä–µ–∫–ª–∞–º—É (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)\n"
        "‚Ä¢ –°–ø–∞–º (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)",
        parse_mode='Markdown'
    )

@dp.callback_query(F.data == "help_respond")
async def handle_help_respond(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—á—å'"""
    if await check_user_blocked(callback.from_user.id):
        await send_blocked_callback(callback)
        return
    
    data = await state.get_data()
    current_request = data.get("current_request")
    
    if current_request:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Markdown
        safe_current_nickname = escape_markdown(current_request['nickname'])
        await callback.message.answer(
            f"üíù –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è **{safe_current_nickname}**:\n\n"
            "üí° –°–æ–≤–µ—Ç: –∫–æ—Ä–æ—Ç–∫–∏–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ–≤–∞ —á–∞—Å—Ç–æ –ø–æ–º–æ–≥–∞—é—Ç –±–æ–ª—å—à–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤\n\n"
            "‚ÑπÔ∏è _–ü–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏_",
            parse_mode='Markdown'
        )
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await state.set_state(UserStates.waiting_message)
        await state.update_data(action="support", help_recipient=current_request)
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã", reply_markup=main_kb)
        await state.clear()
    
    await callback.answer()

@dp.callback_query(F.data == "help_next")
async def handle_help_next(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª—å—à–µ'"""
    if await check_user_blocked(callback.from_user.id):
        await send_blocked_callback(callback)
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫ + —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç + –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç)
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        current_message_id = callback.message.message_id
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=current_message_id)
        logger.info(f"Deleted current help message {current_message_id}")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫)
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=current_message_id - 1)
        logger.info(f"Deleted previous message {current_message_id - 1}")
        
    except Exception as e:
        logger.warning(f"Failed to delete previous messages: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
    await show_help_request_simple(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data == "help_menu")
async def handle_help_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    if await check_user_blocked(callback.from_user.id):
        await send_blocked_callback(callback)
        return
    
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "help_complaint")
async def handle_help_complaint(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è'"""
    data = await state.get_data()
    current_request = data.get("current_request")
    
    if current_request:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É —á–µ—Ä–µ–∑ API
        complaint_data = {
            "request_id": current_request['id'],
            "complainer_user_id": callback.from_user.id
        }
        
        logger.info(f"üö® Submitting complaint for message {current_request['id']} by user {callback.from_user.id}")
        
        response = await api_request("submit_complaint", complaint_data)
        
        if response and response.get("status") == "success":
            complaints_count = response.get("complaints_count", 0)
            auto_blocked = response.get("auto_blocked", False)
            
            if auto_blocked:
                message_text = f"""üö® **–ñ–∞–ª–æ–±–∞ –ø–æ–¥–∞–Ω–∞**

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.

üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**
üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±: **{complaints_count}**

üí° _–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ–±—â–µ–π –ª–µ–Ω—Ç—ã_
üõ°Ô∏è _–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º_"""
            else:
                message_text = f"""üö® **–ñ–∞–ª–æ–±–∞ –ø–æ–¥–∞–Ω–∞**

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: **{complaints_count}**

üí° _–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ–±—â–µ–π –ª–µ–Ω—Ç—ã_"""
            
            await callback.message.answer(
                message_text,
                parse_mode='Markdown',
                reply_markup=main_kb
            )
            
            if auto_blocked:
                logger.warning(f"üö´ User auto-blocked notification sent for message {current_request['id']}, total complaints: {complaints_count}")
            else:
                logger.info(f"‚úÖ Complaint successfully submitted for message {current_request['id']}, total complaints: {complaints_count}")
        else:
            await callback.message.answer(
                "‚ùå **–û—à–∏–±–∫–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='Markdown',
                reply_markup=main_kb
            )
            logger.error(f"‚ùå Failed to submit complaint for message {current_request['id']}")
        
        await state.clear()
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã", reply_markup=main_kb)
        await state.clear()
    
    await callback.answer()

@dp.callback_query(F.data == "change_nickname")
async def handle_change_nickname(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º'"""
    if await check_user_blocked(callback.from_user.id):
        await send_blocked_callback(callback)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–∞, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –ø—Ä–æ—Ñ–∏–ª—å
    await callback.message.answer(
        "‚úèÔ∏è **–°–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞**\n\n"
        "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º (3-20 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
        "üí° _–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º_",
        parse_mode='Markdown'
    )
    await state.set_state(UserStates.changing_nickname)
    await callback.answer()


async def show_toplist(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        return
    
    user_id = message.from_user.id
    logger.info(f"Toplist button pressed by user {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø-–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ API —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        result = await asyncio.wait_for(
            api_request("toplist", {"user_id": user_id}),
            timeout=10.0  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        )
        logger.info(f"Toplist API result: {result}")
        
        if result.get("status") == "ok":
            toplist = result.get("toplist", [])
            user_position = result.get("user_position", 0)
            user_rating = result.get("user_rating", 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-–ª–∏—Å—Ç–æ–º
            toplist_text = "üèÜ **–¢–æ–ø –ª–∏—Å—Ç –ª–∏–≥–∏**\n\n"
            
            if toplist:
                for user in toplist:
                    position = user["position"]
                    nickname = escape_markdown(user["nickname"])
                    rating = user["rating"]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç
                    if position == 1:
                        position_emoji = "ü•á"
                    elif position == 2:
                        position_emoji = "ü•à"
                    elif position == 3:
                        position_emoji = "ü•â"
                    else:
                        position_emoji = f"{position}."
                    
                    toplist_text += f"{position_emoji} **{nickname}** - {rating} ‚≠ê\n"
            else:
                toplist_text += "_–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª —Ä–µ–π—Ç–∏–Ω–≥_\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_position > 10:
                toplist_text += f"\nüìç **–¢–≤–æ–µ –º–µ—Å—Ç–æ:** {user_position} (—Ä–µ–π—Ç–∏–Ω–≥: {user_rating} ‚≠ê)"
            elif user_position <= 10 and user_rating > 0:
                toplist_text += f"\nüéâ **–¢—ã –≤ —Ç–æ–ø-10!** (–º–µ—Å—Ç–æ: {user_position})"
            else:
                toplist_text += f"\nüí™ **–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥:** {user_rating} ‚≠ê\n_–ü–æ–º–æ–≥–∞–π –ª—é–¥—è–º, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!_"
            
            await message.answer(
                toplist_text,
                parse_mode='Markdown',
                reply_markup=main_kb
            )
        else:
            # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                "üèÜ **–¢–æ–ø –ª–∏—Å—Ç**\n\n"
                "üìä –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
                "üí° _–ü–æ–º–æ–≥–∞–π –ª—é–¥—è–º, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥!_",
                parse_mode='Markdown',
                reply_markup=main_kb
            )
    
    except asyncio.TimeoutError:
        logger.warning(f"Toplist API timeout for user {user_id}")
        await message.answer(
            "üèÜ **–¢–æ–ø –ª–∏—Å—Ç**\n\n"
            "‚è∞ –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
            "üí° _–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!_",
            parse_mode='Markdown',
            reply_markup=main_kb
        )
    
    except Exception as e:
        logger.error(f"Toplist error for user {user_id}: {e}")
        await message.answer(
            "üèÜ **–¢–æ–ø –ª–∏—Å—Ç**\n\n"
            "üìä –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            "üí° _–ü–æ–º–æ–≥–∞–π –ª—é–¥—è–º, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥!_",
            parse_mode='Markdown',
            reply_markup=main_kb
        )












@dp.message()
async def unknown(message: types.Message, state: FSMContext):
    """–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if await check_user_blocked(message.from_user.id):
        await send_blocked_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä
    if message.text:
        filter_result = message_filter.check_message(message.from_user.id, message.text, "text")
        if filter_result.is_blocked:
            await handle_filter_violation(message, filter_result)
            return
    
    await state.clear()
    await message.answer("ü§î –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=main_kb)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting bot...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())